<HTML DIR="ltr">
<HEAD>
<TITLE>WMI Event Provider Wizard</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">

<STYLE TYPE="text/css">@import url();</STYLE>
	<SCRIPT>
		var strURL = "../../../../../";
		strURL += window.external.GetHostLocale();
		strURL += "/NewStyles.css";
		document.styleSheets(0).imports(0).href = strURL;
	</SCRIPT>
</HEAD>

<BODY BGCOLOR="BUTTONFACE" TOPMARGIN="0" LEFTMARGIN="0" RIGHTMARGIN="0" BOTTOMMARGIN="0" ONLOAD="InitDocument(document);" ONKEYDOWN="OnKey();" ONKEYPRESS="OnPress();">

<TABLE CLASS="ONE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	<COL WIDTH="100%">
	<TR VALIGN="TOP">
	<TD HEIGHT="79">
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW ONE//-->
	 <TABLE CLASS="TWO" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	 <COL WIDTH="12"><COL><COL WIDTH="12">
	  <TR>
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="12">
	  	&nbsp;
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="12">
	  	&nbsp;
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="12">
	  	&nbsp;
	   </TD>
  
	   <TD CLASS="IMAGE" VALIGN="bottom" WIDTH="110" ROWSPAN="2">
		<DIV ID="Layer0">
		 <IMG CLASS="SMALLEST" SRC="../../Images/Event_1.gif" WIDTH="63" HEIGHT="63" ALT="" BORDER="0"></IMG>
		</DIV>
	   </TD>

	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="6" ROWSPAN="2">
	  	&nbsp;
	   </TD>
	  </TR>
	 
	  <TR>
	   <TD VALIGN="TOP" HEIGHT="65" WIDTH="12">
	  	&nbsp;
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="65">
		<H4 CLASS="HEAD" ID="HEAD">WMI class </H4>
            <P class=SUBHEAD id=SUBHEAD>Specify  the Windows Management Instrumentation (WMI) event class you wish to support for your object.</P>
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="65" WIDTH="12">
	  	&nbsp;
	   </TD>
	  </TR>
	 
	  <TR>
	   <TD VALIGN="TOP" CLASS="RULE" COLSPAN="5" HEIGHT="2">
		<TABLE BORDER="0" WIDTH="100%" HEIGHT="1" CELLPADDING="0" CELLSPACING="0">
	  	 <TR VALIGN="TOP">
	  	  <TD HEIGHT="1" WIDTH="100%" BGCOLOR="buttonshadow"><IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="1" ALT=""></TD>
	  	  <TD HEIGHT="1" WIDTH="1" BGCOLOR="window"><IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="1" ALT=""></TD>
	  	 </TR>
		</TABLE>
	   </TD>
	  </TR>
	 </TABLE>
	 
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW ONE//-->
	</TD>
	</TR>
	<TR VALIGN="TOP">
	<TD HEIGHT="100%">
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW TWO//-->
	
	 <TABLE CLASS="ONE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	 <COL WIDTH="178"><COL>
  <TR VALIGN="TOP">
	<TD CLASS="Three" VALIGN="TOP" HEIGHT="100%" WIDTH="178">
	 <TABLE CLASS="fixedSize" HEIGHT="100%" WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
  	  <TR VALIGN="TOP">
	   <TD CLASS="threeCustom" VALIGN="TOP" STYLE="BACKGROUND-IMAGE:url(../../Images/Event_background.gif)">
	   <!--OPEN OF NAVIGATION TABLE//-->

	    <TABLE CLASS="THREE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		<COL WIDTH="12"><COL WIDTH="166"><COL WIDTH="1">
		 <TR>
	   	  <TD VALIGN="TOP" COLSPAN="3" HEIGHT="12">
	  		&nbsp;
		  </TD>
		 </TR>
		 <TR>
	   	  <TD VALIGN="TOP" HEIGHT="100%" WIDTH="12">
	  		&nbsp;
		  </TD>
	   	  <TD VALIGN="TOP" HEIGHT="100%" WIDTH="165">
	   	  <!--OPEN OF NAVIGATIONAL LINKS//-->

		  	<DIV CLASS="LINK">
			 <TABLE WIDTH="166" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXT">
			  <TR VALIGN="center">
	  		   <TD WIDTH="162">
				<SPAN ID="Default"  CLASS="ACTIVELINK" TITLE="Specify class names and file names." onClick="Next(document, 'Default.htm');" TABINDEX="1"><ID ID="idLocDefault">Names</ID></SPAN>
			   </TD>
	  		   <TD WIDTH="4">
			  	<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
			
		  	<DIV CLASS="LINKSELECTED">
	 	   	 <SPAN CLASS="VERTLINE1">
			  <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0">
			 </SPAN>
			 <SPAN CLASS="HORILINE1">
			  <TABLE WIDTH="167" HEIGHT="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			   <TR VALIGN="TOP">
			    <TD CLASS="DOTTEDLINE" HEIGHT="1">
				</TD>
			   </TR>
			   <TR VALIGN="TOP">
			    <TD HEIGHT="100%">
				 <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="28" ALT="" BORDER="0">
			    </TD>
			   </TR>
			   <TR VALIGN="TOP">
			    <TD CLASS="DOTTEDLINE" HEIGHT="1">
			    </TD>
			   </TR>
			  </TABLE>
			 </SPAN>
			 <TABLE WIDTH="160" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXTSELECTED">
			  <TR VALIGN="MIDDLE">
			   <TD WIDTH="156">
				<SPAN ID="WMIClass" TITLE="Specify  the Windows Management Instrumentation (WMI) event class you wish to support for your object."><ID ID="idLocWMIClass">WMI Class</ID></SPAN>
			   </TD>
			   <TD WIDTH="4">
				<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
                  
			<DIV CLASS="LINK">
			 <TABLE WIDTH="166" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXT">
			  <TR VALIGN="center">
	  		   <TD WIDTH="162">
				<SPAN ID="Attributes" CLASS="ACTIVELINK" TITLE="Choose if your object will support event security authentication and the threading model to be used." onClick="Next(document, 'Attributes.htm');" TABINDEX="1"><ID ID="idLocAttributes">Attributes</ID></SPAN>
			   </TD>
	  		   <TD WIDTH="4">
			  	<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
			
	   	  <!--CLOSE OF NAVIGATIONAL LINKS//-->
		  </TD>
		  <TD WIDTH="1">
		   <DIV CLASS="VERTLINE">
			 <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0">
		   </DIV>
		  </TD>
		 </TR>
		</TABLE>
			
	   <!--CLOSE OF NAVIGATION TABLE//-->
	   </TD>
	   </TR>
	   </TABLE>
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="100%">
	   <!--OPEN OF CONTENT AND BUTTON TABLE//-->
	   
	   	<TABLE CLASS="ONE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		<COL WIDTH="100%">
		 <TR VALIGN="TOP">
		  <TD HEIGHT="100%">
	   	  <!--OPEN OF CONTENT//-->
		  
		  <TABLE CLASS="CONTENT" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		  <COL WIDTH="12"><COL WIDTH="398"><COL WIDTH="12">
		    <TR>
			  <TD VALIGN="top" COLSPAN="5" HEIGHT="12">
			  	&nbsp;
			  </TD>
			</TR>
			
			<TR>
			  <TD VALIGN="top" WIDTH="12">
			  	&nbsp;
			  </TD>
			  <TD STYLE="WIDTH:454px" VALIGN="top">
			  	<TABLE CLASS="FixedSize" BORDER="0" CELLPADDING="0" CELLSPACING="0">
				  <TR>
				    <TD STYLE="WIDTH:396px;" VALIGN="top">
  	  		<!-- two invisible test boxes to store ns and classname-->
            <INPUT CLASS="itemText" ID="NAMESPACE" NAME="NAMESPACE" STYLE="DISPLAY:NONE;"></INPUT>
			<INPUT CLASS="itemText" ID="WMICLASSNAME" NAME="WMICLASSNAME" STYLE="DISPLAY:NONE;"></INPUT>
            
            <P CLASS="ElementSpacer">&nbsp;</P>
                
                  <SPAN CLASS="itemTextTop" ID="EVENT_TYPE_LABEL"><ID ID="idLocEventType">Select event type:</ID>
			    <BR>
		<SPAN ID="INTRINSIC_TITLE" TITLE="Show instance classes for which creation, deletion or modification events will be supplied.">

                    <INPUT ID="INTRINSIC"ACCESSKEY="I" onClick="OnChangeNS();" TYPE="radio" NAME="eventtype">        
                    				      <LABEL CLASS="UpABit" FOR="INTRINSIC" ID="INTRINSIC_LABEL">
					    <ID ID="idLocIntrinsicEvents"><U>I</U>ntrinsic events</ID>
					  </LABEL>
				    </SPAN>
                  <SPAN ID="EXTRINSIC_TITLE" TITLE="Show custom event classes.">
                    <INPUT ID="EXTRINSIC" ACCESSKEY="E" onClick="OnChangeNS();" TYPE="radio" NAME="eventtype" CHECKED>					  <LABEL CLASS="UpABit" FOR="EXTRINSIC" ID="EXTRINSIC_LABEL">
                  	    <ID ID=idLocExtrinsicEvents><U>E</U>xtrinsic events</ID>
					  </LABEL>
					</SPAN>
				  </SPAN>                             
                  
           		  <P CLASS="ElementSpacer16">&nbsp;</P>
                                 
                                <SPAN 
                                class=itemText ID="SELECT_NAMESPACE_LABEL" TITLE=" Select a WMI namespace where the class is located.">
                                <id id=idLocSelectNamespace>Select <u>n</u>amespace:</id>
                                <P class=Spacer 
                                >&nbsp;</P>				
				<select 
                                class=sideBtn id=NSPICKER
                                style="WIDTH:400px; MARGIN-TOP:-3PX;" accessKey=n 
                                onchange=OnChangeNS() align=left size=1 
                                name=NSPICKER 
                                TYPE="SELECT-ONE"><option value=1 selected >root</option></select><br 
                                ></SPAN>                             
                  
           		  <P CLASS="ElementSpacer8">&nbsp;</P>
                                
                                <SPAN 
                                class=itemText ID="SELECT_CLASS_LABEL" TITLE="Select the class for which your object will supply events.">
                                <id id=idLocSelectClass>Select cl<u>a</u>ss:</id>
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <input 
                                class=itemText oncut=OnInputKeyPress() 
                                onpaste=OnInputKeyPress() id=CLASSINPUT 
                                style="WIDTH: 400px" align=left size=390 
                                name=CLASSINPUT onkeypress="OnInputKeyPress()"></SPAN><br 
                                > 
                                
                                <SELECT 
                                class=sideBtn3 id=CLASSPICKER 
                                ondblclick=OnClassDblClick(); 
                                style="WIDTH: 321px" accessKey=a 
                                onchange=OnChangeSelection(); size=4 
                                name=CLASSPICKER TYPE="SELECT-ONE"></SELECT></SPAN>

                                <button 
                                class=BUTTONS id=CLEARBTN accessKey=c TITLE="Clear the current selection."
                                onclick=onClearClick(); 
                                type=button style="position:relative; top:-33px; left:4px;"><u>C</u>lear</button>

                                <button class=BUTTONS id=SELECTBTN TITLE="Accept the choice in the Select Class list and make it the currect selection." accessKey=s onclick=OnClassDblClick() type=button 
                                 style="position:relative; top:-23px; left:4px; float:right;"><u>S</u>elect</button>
                  
           		  <P CLASS="ElementSpacer2">&nbsp;</P>
                                
                                <SPAN 
                                class=itemText ID="CURRENT_SELECTION_LABEL" TITLE="The provider object will supply events for this class.">
                                <id id=idLocCurrentSelection>Current selection:</id>
                                <P class=Spacer>&nbsp;</P>
                                <textarea class=itemText id=CURRENTSELECTION style="OVERFLOW: visible; WIDTH: 400px; BACKGROUND-COLOR: inactiveborder" readOnly></textarea> 
                                </SPAN>
								</TD>
							  </TR>
							</TABLE>
						</TD>
								
                        <TD VALIGN="top" WIDTH="12">
							&nbsp; 
                        </TD>
					</TR>
				</TABLE>
  		
	   	  <!--CLOSE OF CONTENT//-->
		  </TD>
		 </TR>
		 <TR VALIGN="bottom">
		  <TD HEIGHT="48">
	   	  <!--OPEN OF BUTTON HTML//-->
		  
		  	<TABLE HEIGHT="48" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			<COL WIDTH="12"><COL><COL WIDTH="75"><COL WIDTH="4"><COL WIDTH="75"><COL WIDTH="4"><COL WIDTH="75"><COL WIDTH="12">
			 <TR>
  			  <TD VALIGN="TOP" CLASS="RULE" COLSPAN="8" HEIGHT="2">
				<TABLE BORDER="0" WIDTH="100%" HEIGHT="1" CELLPADDING="0" CELLSPACING="0">
  	 			 <TR VALIGN="TOP">
  	  			  <TD HEIGHT="1" WIDTH="100%" BGCOLOR="buttonshadow"><IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="1" ALT=""></TD>
  	  			  <TD HEIGHT="1" WIDTH="1" BGCOLOR="window"><IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="1" ALT=""></TD>
  	 			 </TR>
				</TABLE>
  			  </TD>
 			  </TR>
 
 			  <TR>
  			  <TD VALIGN="TOP" HEIGHT="11" COLSPAN="8">
  				&nbsp;
  			  </TD>
 			 </TR>
 
 			<TR>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="12">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="TOP" HEIGHT="23">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="75">
  				
  				<BUTTON CLASS="BUTTONS" ID="FinishBtn" TITLE="Validate entries and create class." onClick="OnFinish(document);" TYPE="BUTTON">Finish</BUTTON>
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="4">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="CancelBtn" TITLE="Close wizard without creating class." onClick="window.external.Finish(document, 'cancel');" TYPE="BUTTON">Cancel</BUTTON>
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="4">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="HelpBtn" TITLE=" Bring up help for this wizard."onClick="window.external.OnHelp('vc.codewiz.wmi.atl.event.wmiclass');" TYPE="BUTTON">Help</BUTTON>
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="12">
  				&nbsp;
  			  </TD>
 			 </TR>
 
 			 <TR>
  			  <TD VALIGN="TOP" HEIGHT="12" COLSPAN="8">
  				&nbsp;
  			  </TD>
 			 </TR>
			</TABLE>
			
	   	  <!--CLOSE OF BUTTON HTML//-->
		  </TD>
		 </TR>
		</TABLE>
	
	   <!--CLOSE OF CONTENT AND BUTTON TABLE//-->
	   </TD>
	  </TR>
	 </TABLE>
	
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW TWO//-->
	</TD>
	</TR>
	</TABLE>
	
	</BODY>
</HTML>
<SCRIPT LANGUAGE="JSCRIPT">
var tab_array = new Array();
tab_array[0] = Default;
tab_array[1] = WMIClass;
tab_array[2] = Attributes;
//tab_array[3] = Properties;

var L_arCodeComments_Text = new Array();
L_arCodeComments_Text[0] = "//TODO: put appropriate value here";

var dictCIM2VT = new ActiveXObject("Scripting.Dictionary");
dictCIM2VT.Add("2", "VT_I2"); 	//wbemCimtypeSint16
dictCIM2VT.Add("3", "VT_I4"); 	//wbemCimtypeSint32
dictCIM2VT.Add("4", "VT_R4"); 	//wbemCimtypeReal32
dictCIM2VT.Add("5", "VT_R8"); 	//wbemCimtypeReal64
dictCIM2VT.Add("8", "VT_BSTR"); 	//wbemCimtypeString
dictCIM2VT.Add("11", "VT_BOOL"); 	//wbemCimtypeBoolean
dictCIM2VT.Add("13", "VT_UNKNOWN"); //wbemCimtypeObject
dictCIM2VT.Add("16", "VT_I2"); 	//wbemCimtypeSint8	
dictCIM2VT.Add("17", "VT_UI1"); //wbemCimtypeUint8
dictCIM2VT.Add("18", "VT_I4"); 	//wbemCimtypeUint16 
dictCIM2VT.Add("19", "VT_I4"); 	//wbemCimtypeUint32 
dictCIM2VT.Add("20", "VT_BSTR"); 	//wbemCimtypeSint64 
dictCIM2VT.Add("21", "VT_BSTR"); 	//wbemCimtypeUint64 
dictCIM2VT.Add("101", "VT_BSTR"); //wbemCimtypeDatetime	
dictCIM2VT.Add("102", "VT_BSTR"); //wbemCimtypeReference 
dictCIM2VT.Add("103", "VT_I2"); //wbemCimtypeChar16 

var propPrefix = 	"s_pProp";

var locator;
var services;
var classSink = InternalGetObject("WbemScripting.SWbemSink");
var arClassNames; 
var dictLookup;  
var bRestoreClassSelection = false;
var strCurNamespace;

function InitDocument(document)
{
	var bFirstLoad = window.external.FindSymbol("DOCUMENT_FIRST_LOAD");
	if (bFirstLoad)
	{
		window.external.SetDefaults(document);		
	}
	window.external.Load(document);
	
	locator = InternalGetObject("WbemScripting.SWbemLocator"); 
			
	EnumNamespaces("root", 1);
	
	CURRENTSELECTION.value = "";
	
	bRestoreClassSelection = true;
			
	//force selection of the last selected namespace and class
	//or the first elements in both listboxes
	RestoreNSSelection();
	
	OnChangeNS();	
}

function EnumNamespaces(name, num)
//recursively adds namespaces to the drop-down box
{
	
	try
	{
		services = locator.ConnectServer("", name);	
	}
	catch (e)
	{
		return;
	}	
	
	var instances = new Enumerator(services.InstancesOf("__NAMESPACE"));

	for (; !instances.atEnd(); instances.moveNext() )
	{
		num++;
		var oOption = document.createElement("OPTION");
	
		NSPICKER.options.add(oOption);

		var NameOut;
		if (name != "")
		{
			NameOut = name + "\\" + instances.item().Name;
		}
		else
		{
			NameOut = instances.item().Name;
		} 

		oOption.innerText = NameOut;
		oOption.Value = num;
	
		EnumNamespaces(NameOut, num);							
	}
}

function OnChangeNS()
//clear array and dictionary, then call asynchronous class enumeration
{
	//cancel any pending asynchronous requests
	//classSink.Cancel();
	
	//clear CLASSPICKER and CLASSINPUT first
	while (CLASSPICKER.options.length > 0)
	{
		CLASSPICKER.options.remove(0);
	}		
	CLASSINPUT.value = "";							
	
	//clear class names array and dictionary
	arClassNames = ""; 
	arClassNames = new Array();
	dictLookup = "";
	dictLookup = new ActiveXObject("Scripting.Dictionary");
	
	var bIntrinsic = INTRINSIC.checked;
	var bExtrinsic =  EXTRINSIC.checked;		
	
	//Display "Loading classes..." in the class list box
	var L_LoadingClsMsg_Text = "Loading classes...";
	var oOption = document.createElement("OPTION");		
	CLASSPICKER.options.add(oOption);							
	oOption.innerText = L_LoadingClsMsg_Text;
	oOption.Value = 1;							
	
	var strNS = NSPICKER[NSPICKER.selectedIndex].innerText;
	try
	{
		services = locator.ConnectServer("", strNS);
	}
	catch (e)
	{
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}				
		return;
	}
					
	document.body.style.cursor = 'wait';
	
	//services.SubclassesOfAsync(classSink); 
	
	
	var enumClasses = new Enumerator(services.SubclassesOf("",
									0, //wbemFlagReturnWhenComplete+wbemFlagQueryDeep,
									null)); 

	for (; !enumClasses.atEnd(); enumClasses.moveNext() )
	{					
	
		//Filter out classes according to event provider type.
		//Put each qualifying object's class name into an array (in the uppercase) 
		//and a dictionary, mapping uppercase and case-preservant names
	
		
		if (bIntrinsic) 
		{
			//filter out abstract, system and event classes
			//NOTE: ALL EVENT CLASSES ARE ABSTRACT
			if (CheckBoolQualifier(enumClasses.item(), "abstract") || IsSystem(enumClasses.item()))
				continue;
		}
		
		if (bExtrinsic) 
		{
			//filter out all classes that are not derived 
			//from __ExtrinsicEvent.  And all system classes, too.
			if (!IsExtrinsicEvent(enumClasses.item()) || IsSystem(enumClasses.item()))
				continue;			
		}
				
		var NameOut = enumClasses.item().Path_.RelPath;
		arClassNames[arClassNames.length] = NameOut.toUpperCase();
		dictLookup.Add (NameOut.toUpperCase(), NameOut);									
	}										
	
	//sort the uppercase array; pull case-preservant names from the dictionary 
	//and display them

	//clear "Loading..." text from CLASSPICKER		
	while (CLASSPICKER.options.length > 0)
	{
		CLASSPICKER.options.remove(0);
	}				
	
	arClassNames.sort();
	
	for (i = 0; i < arClassNames.length; i++)		
	{			
		var oOption = document.createElement("OPTION");		
		CLASSPICKER.options.add(oOption);	
								
		oOption.innerText = dictLookup.Item(arClassNames[i]);			
		oOption.Value = i + 1;					
	}

	if (bRestoreClassSelection)		//first enumeration after InitDocument()
	{
		RestoreClassSelection();
		bRestoreClassSelection = false;
	}
	else
	{
		//force selection of the first class in the list
		CLASSPICKER.selectedIndex = 0;			
		OnChangeSelection();	
	}			
	
	document.body.style.cursor = 'default';					

}

function OnInputKeyPress()
//selects best-matching class in the listbox
{    
	//update text immediately
	//CLASSINPUT.value += String.fromCharCode(event.keyCode);
		

	var strInput = CLASSINPUT.value.toUpperCase(); // + String.fromCharCode(event.keyCode).toUpperCase();
	
	//alert (strInput);
			
	var bLoopThrough = true;
		
	for (i = 0; i < CLASSPICKER.options.length; i++)
	{	
		var strListed = CLASSPICKER.options[i].innerText.toUpperCase();			
				
		if (strListed >= strInput)
		{
			CLASSPICKER.selectedIndex = i;						
			bLoopThrough = false;
			break;
		}
	}		
	if (bLoopThrough)
	{
		//select the last line
		CLASSPICKER.selectedIndex = CLASSPICKER.options.length - 1;
	}
	
	//we already updated text, so no need to add the character again:		
	//event.returnValue=false;
}

function OnChangeSelection()
//display selected value in CLASSINPUT box
{
	if (CLASSPICKER.selectedIndex == -1)
	{
		return;
	}		
	
	var selectionValue = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
	
	//check to see if the selected string is a class name (i.e., appears in the map)
	if (!dictLookup.Exists(selectionValue.toUpperCase())) 
	{
		return;
	}
	
	CLASSINPUT.value = selectionValue;	
}

function OnClassDblClick()
{

	if (NSPICKER.options.length == 0 || CLASSPICKER.options.length ==0)
	{
		return;
	}

	var selNamespace = NSPICKER[NSPICKER.selectedIndex].innerText;
	var selClassName = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
	
	if (EXTRINSIC.checked)
	{
		//see if the class already has a "provider" qualifier and warn
		var classObj = services.Get(selClassName);	
		var strCurrentProv = GetCurrentProviderName(classObj);
		if (strCurrentProv != "")
		{
			var L_provConfirmMsg_Text = "Warning: this class already has a provider: ";
			var L_provConfirmMsg2_Text = ". Replacing the existing provider could destabilize your system. Are you sure you want to do this?";
			
			var bReplaceProv = confirm (L_provConfirmMsg_Text + strCurrentProv + L_provConfirmMsg2_Text);
			if (!bReplaceProv)
			{
				return;
			}
		}
	}
	else
	{
		//there is no easy way to determine if there is an intrinsic event provider.
		//Also, if the class doesn't have one, winmgmt is polling instance data and firing instrinsic
		//events. Registering a provider causes winmgmt to stop polling and so this will break 
		//potential consumers. We will therefore ALWAYS bring up a warning for intrinsic providers:
		
		var L_classConfirmMsg_Text = "Warning:  unless you created class \"";
		var L_classConfirmMsg2_Text =  "\", it is strongly advised that you do NOT register an intrinsic event provider for it. Doing so may seriously affect your system. Are you sure you want to do this?";
		
		var bRegisterProv = confirm (L_classConfirmMsg_Text + selClassName + L_classConfirmMsg2_Text);
		if (!bRegisterProv)
		{
			return;
		}
	}
					
	var selectionValue = selNamespace + " : " +	selClassName;
							
	//check to see if the selected string is a class name (i.e., appears in the map)
	if (!dictLookup.Exists(selClassName.toUpperCase())) 
		return;

	CURRENTSELECTION.value = selectionValue;
	NAMESPACE.value = selNamespace;
	WMICLASSNAME.value = selClassName;
			
	strCurNamespace = selNamespace;
}
function OnUnload()
{
	
}

function Next(document, linkto)
{
	GetWMIClassInfo();
	window.external.Next(document, linkto);
}



function OnFinish(document)
{
	GetWMIClassInfo();
	if (window.external.FindSymbol("SHORT_NAME").length == 0)
	{
		var L_ErrMsg1_Text = "Need to specify a short name.";		
		window.external.ReportError(L_ErrMsg1_Text);
		Next(document, "default.htm");
		return;
	}

	if (window.external.FindSymbol("ATTRIBUTED") == true)
		if (!ConvertProjectToAttributed())
			return;

	OnWizFinish(document);
}

function InternalGetObject(progID)
{
	var broker = new ActiveXObject("WMIScriptUtils.WMIObjectBroker");
	if (broker.CanCreateObject(progID))
	{
		return broker.CreateObject(progID);
	}
	else
	{
		try
		{
			var registrar = new ActiveXObject("WMIScriptUtils.WMIObjectBrokerRegistration");
			if(registrar == null)
			{
				return;
			}
  			registrar.Register(progID);
  			return broker.CreateObject(progID);
		}
		catch(e)
		{
			return;
		}
	}
}

function RestoreNSSelection()
{
	strCurNamespace = NAMESPACE.value;
	//select saved namespace in NSPICKER
	for (i = 0; i < NSPICKER.options.length; i++)
	{	
		var strCurrent = NSPICKER.options[i].innerText;
		if (strCurrent == NAMESPACE.value) 
		{
			NSPICKER.selectedIndex = i;
			
			//fill CURRENTSELECTION box:
			CURRENTSELECTION.value = NAMESPACE.value + " : ";				
			return;
		}
	}	
	
	//or, just select the first index
	NSPICKER.selectedIndex = 0;
						
}

function RestoreClassSelection()
{
	var bRestored = false;
	
	//select saved class in CLASSPICKER
	for (i = 0; i < CLASSPICKER.options.length; i++)
	{	
		var strCurrent = CLASSPICKER.options[i].innerText;
		if (strCurrent == WMICLASSNAME.value) 
		{
			CLASSPICKER.selectedIndex = i;
			//fill CURRENTSELECTION box:
			CURRENTSELECTION.value += WMICLASSNAME.value;		
			
			bRestored = true;				
			break;
		}
	}
	
	//or, just select the first index
	if (!bRestored)
	{
		CLASSPICKER.selectedIndex = 0;
	}
										
	//update CLASSINPUT
	OnChangeSelection();		
			
}




function IsExtrinsicEvent(objObject)
{
	//handle __ExtrinsicEvent class separately, since it is not its own parent
	if (objObject.Path_.RelPath.toString() == "__ExtrinsicEvent")
	{
		return true;
	}

	arVB = new VBArray(objObject.Derivation_);
	arJS = arVB.toArray();
	
	for (i =0; i < arJS.length; i++)
	{
		if (arJS[i].toString() == "__ExtrinsicEvent")
		{
			return true;
		}
	}
	return false;
		
}

function CheckBoolQualifier (obj, qualName)
{
try 
	{
		var qual = obj.Qualifiers_(qualName);	
			
		return (qual.Value);
	}
	catch(e)
	{
		//NOTE that if the qualifier is not present, "Not found" will be returned
		//Return false in this case
		return false;
	}				
}


function GetCurrentProviderName (obj)
{
//checks if the class already has a "provider" qualifier value and returns it.
//if the class doesn't have a "provider" qualifier or its value is empty, an empty string is 
//returned.
try 
	{
		var qual = obj.Qualifiers_("provider");	
					
		return (qual.Value.toString());
	}
	catch(e)
	{
		//NOTE that if the qualifier is not present, "Not found" will be returned
		//Return empty string in this case
		return "";
	}				
}


function IsSystem(objObject)
{
	try 
	{
		var NameOut = objObject.Path_.RelPath;
		
			
		return (NameOut.slice(0, 2).toString() == "__");
				
	}
	catch(e)
	{
		return false;
	}				
}

function GetWMIClassInfo()
{
	if (WMICLASSNAME.value == "")
		return;
	
	if(strCurNamespace == "" || strCurNamespace == null)
	{
		return;
	}

	// Get the services for the selected class
	// Namespace in the list box might be changed and this would have changed 
	// the services pointer
	try
	{
		services = locator.ConnectServer("", strCurNamespace);
	}
	catch(e)
	{
		return;
	}

	var classObj = services.Get(WMICLASSNAME.value);
	
	if (EXTRINSIC.checked)
	{					
		//Create EXTRINSIC_PUT_BLOCK:
		var strExtrinsicPutBlock = "CComVariant var;\n\r";
		var strExtrPropertyDecls = "";	
		var strExtrPropertyDefs = "";
		
		var props = new Enumerator (classObj.Properties_);	
		for (; !props.atEnd(); props.moveNext() )
		{
			strExtrPropertyDecls += "extern const WCHAR * " + propPrefix + props.item().Name + ";\n\r";
			strExtrPropertyDefs += "const static WCHAR * " + propPrefix + props.item().Name +
									" = L\"" + props.item().Name + "\";\n\r";

			var vt = dictCIM2VT.Item(props.item().CIMType.toString());
			if (props.item().IsArray) {
				vt += " | VT_ARRAY";
			}			
			strExtrinsicPutBlock += "	var.ChangeType(" + vt + ");\n\r";
			strExtrinsicPutBlock += "	//var = <value>;" + L_arCodeComments_Text[0] +	"\n\r";
			strExtrinsicPutBlock += "	hr = pEvtInstance->Put(" + propPrefix + props.item().Name + 
									", 0, &var, 0);\n\r";
			strExtrinsicPutBlock += "	var.Clear();\n\r\n\r";												
	
		}
		window.external.AddSymbol("EXTRINSIC_PUT_BLOCK", strExtrinsicPutBlock);
		window.external.AddSymbol("EXTR_PROPERTY_DEFINITIONS", strExtrPropertyDefs);
		window.external.AddSymbol("EXTR_PROPERTY_DECLARATIONS", strExtrPropertyDecls);
		
	}		
				
}

function onClearClick()
{
	CURRENTSELECTION.value = "";
	CURRENTSELECTION.test = "";
	WMICLASSNAME.value = "";
	strCurNamespace = "";

}

</SCRIPT>
<SCRIPT ID="INCLUDE_SCRIPT" LANGUAGE="JSCRIPT">
</SCRIPT>
<SCRIPT ID="INCLUDE_COMMON" LANGUAGE="JSCRIPT">
</SCRIPT>
<SCRIPT>
	var strPath = "../../../../../";
	strPath += window.external.GetHostLocale();
	var strScriptPath = strPath + "/Script.js";
	var strCommonPath = strPath + "/Common.js";
	document.scripts("INCLUDE_SCRIPT").src = strScriptPath;
	document.scripts("INCLUDE_COMMON").src = strCommonPath;
</SCRIPT>
