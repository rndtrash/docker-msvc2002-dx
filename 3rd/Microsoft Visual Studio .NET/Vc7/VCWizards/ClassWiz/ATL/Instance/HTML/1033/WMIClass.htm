<HTML DIR="ltr">
<HEAD>
<TITLE>WMI Instance Provider Wizard</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">

<STYLE TYPE="text/css">@import url();</STYLE>
	<SCRIPT>
		var strURL = "../../../../../";
		strURL += window.external.GetHostLocale();
		strURL += "/NewStyles.css";
		document.styleSheets(0).imports(0).href = strURL;
	</SCRIPT>
</HEAD>

<BODY BGCOLOR="BUTTONFACE" TOPMARGIN="0" LEFTMARGIN="0" RIGHTMARGIN="0" BOTTOMMARGIN="0" ONLOAD="InitDocument(document);" ONKEYDOWN="OnKey();" ONKEYPRESS="OnPress();">

<TABLE CLASS="ONE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	<COL WIDTH="100%">
	<TR VALIGN="TOP">
	<TD HEIGHT="79">
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW ONE//-->
	 <TABLE CLASS="TWO" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	 <COL WIDTH="12"><COL><COL WIDTH="12">
	  <TR>
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="12">
	  	&nbsp;
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="12">
	  	&nbsp;
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="12">
	  	&nbsp;
	   </TD>
  
	   <TD CLASS="IMAGE" VALIGN="bottom" WIDTH="110" ROWSPAN="2">
		<DIV ID="Layer0">
		 <IMG CLASS="SMALLEST" SRC="../../Images/Instance_1.gif" WIDTH="63" HEIGHT="63" ALT="" BORDER="0"></IMG>
		</DIV>
	   </TD>

	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="6" ROWSPAN="2">
	  	&nbsp;
	   </TD>
	  </TR>
	 
	  <TR>
	   <TD VALIGN="TOP" HEIGHT="65" WIDTH="12">
	  	&nbsp;
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="65">
		<H4 CLASS="HEAD" ID="HEAD">Select a WMI class for which you want to provide instance information</H4>
            <P class=SUBHEAD id=SUBHEAD>Specify  the Windows Management Instrumentation (WMI) class you wish to support for your object.</P>
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="65" WIDTH="12">
	  	&nbsp;
	   </TD>
	  </TR>
	 
	  <TR>
	   <TD VALIGN="TOP" CLASS="RULE" COLSPAN="5" HEIGHT="2">
		<TABLE BORDER="0" WIDTH="100%" HEIGHT="1" CELLPADDING="0" CELLSPACING="0">
	  	 <TR VALIGN="TOP">
	  	  <TD HEIGHT="1" WIDTH="100%" BGCOLOR="buttonshadow"><IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="1" ALT=""></TD>
	  	  <TD HEIGHT="1" WIDTH="1" BGCOLOR="window"><IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="1" ALT=""></TD>
	  	 </TR>
		</TABLE>
	   </TD>
	  </TR>
	 </TABLE>
	 
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW ONE//-->
	</TD>
	</TR>
	<TR VALIGN="TOP">
	<TD HEIGHT="100%">
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW TWO//-->
	
	 <TABLE CLASS="ONE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	 <COL WIDTH="178"><COL>
  <TR VALIGN="TOP">
	<TD CLASS="Three" VALIGN="TOP" HEIGHT="100%" WIDTH="178">
	 <TABLE CLASS="fixedSize" HEIGHT="100%" WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
  	  <TR VALIGN="TOP">
	   <TD CLASS="threeCustom" VALIGN="TOP" STYLE="BACKGROUND-IMAGE:url(../../Images/Instance_background.gif)">
	   <!--OPEN OF NAVIGATION TABLE//-->

	    <TABLE CLASS="THREE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		<COL WIDTH="12"><COL WIDTH="166"><COL WIDTH="1">
		 <TR>
	   	  <TD VALIGN="TOP" COLSPAN="3" HEIGHT="12">
	  		&nbsp;
		  </TD>
		 </TR>
		 <TR>
	   	  <TD VALIGN="TOP" HEIGHT="100%" WIDTH="12">
	  		&nbsp;
		  </TD>
	   	  <TD VALIGN="TOP" HEIGHT="100%" WIDTH="165">
	   	  <!--OPEN OF NAVIGATIONAL LINKS//-->

		  	<DIV CLASS="LINK">
			 <TABLE WIDTH="166" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXT">
			  <TR VALIGN="center">
	  		   <TD WIDTH="162">
				<SPAN class=ACTIVELINK id=Default title="Specify class names and file names." onclick="Next(document, 'Default.htm');" tabIndex=1><id id=idLocDefault>Names</id></SPAN>
			   </TD>
	  		   <TD WIDTH="4">
			  	<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
				
		  	<DIV CLASS="LINKSELECTED">
	 	   	 <SPAN CLASS="VERTLINE1">
			  <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0">
			 </SPAN>
			 <SPAN CLASS="HORILINE1">
			  <TABLE WIDTH="167" HEIGHT="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			   <TR VALIGN="TOP">
			    <TD CLASS="DOTTEDLINE" HEIGHT="1">
				</TD>
			   </TR>
			   <TR VALIGN="TOP">
			    <TD HEIGHT="100%">
				 <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="28" ALT="" BORDER="0">
			    </TD>
			   </TR>
			   <TR VALIGN="TOP">
			    <TD CLASS="DOTTEDLINE" HEIGHT="1">
			    </TD>
			   </TR>
			  </TABLE>
			 </SPAN>
			 <TABLE WIDTH="160" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXTSELECTED">
			  <TR VALIGN="MIDDLE">
			   <TD WIDTH="156">
				<SPAN id=WMIClass title="Specify  the Windows Management Instrumentation (WMI) class you wish to support for your object."><id id=idLocWmiClass>WMI Class</id></SPAN>
			   </TD>
			   <TD WIDTH="4">
				<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
				
		  	<DIV CLASS="LINK">
			 <TABLE WIDTH="166" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXT">
			  <TR VALIGN="center">
	  		   <TD WIDTH="162">
				<SPAN class=ACTIVELINK id=Attributes title="Specify the instance features, method support and threading model for your object." onclick="Next(document, 'Attributes.htm');" tabIndex=1><id id=idLocAttributes>Attributes</id></SPAN>
			   </TD>
	  		   <TD WIDTH="4">
			  	<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
			
	   	  <!--CLOSE OF NAVIGATIONAL LINKS//-->
		  </TD>
		  <TD WIDTH="1">
		   <DIV CLASS="VERTLINE">
			 <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0">
		   </DIV>
		  </TD>
		 </TR>
		</TABLE>
			
	   <!--CLOSE OF NAVIGATION TABLE//-->
	   </TD>
	   </TR>
	   </TABLE>
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="100%">
	   <!--OPEN OF CONTENT AND BUTTON TABLE//-->
	   
	   	<TABLE CLASS="ONE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		<COL WIDTH="100%">
		 <TR VALIGN="TOP">
		  <TD HEIGHT="100%">
	   	  <!--OPEN OF CONTENT//-->
		  
                        <TABLE class=CONTENT cellSpacing=0 cellPadding=0 
                        border=0>
                          <COL width=12>
                          <COL width=398>
                          <COL width=12>
                          <TBODY>
                          <TR>
                            <TD vAlign=top colSpan=5 height=12 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=top width=12 
                              >&nbsp; </TD>
                            <TD style="WIDTH: 454px" vAlign=top 
                            >
                              <TABLE class="fixedSize" cellSpacing=0 cellPadding=0 
                              border=0>
                                <TR>
                                <TD style="WIDTH:396px;" vAlign=top>
  	  			  
  	  		<!-- invisible controls to store ns, classname and methods-->
								<input 
                                class=itemText id=NAMESPACE 
                                style="DISPLAY: none" name=NAMESPACE 
                                > </input><input 
                                class=itemText id=WMICLASSNAME 
                                style="DISPLAY: none" name=WMICLASSNAME 
                                ></input> 
								
								<input 
                                id=HAS_IMPL_METHODS style="DISPLAY: none" 
                                type=radio CHECKED name=HAS_IMPL_METHODS 
                                ></input>
								
                                <P class=ElementSpacer 
                                >&nbsp;</P>
								
				<SPAN ID="SELECT_NAMESPACE" TITLE="Select a WMI namespace where the class is located."                   class=itemTextTop><id id=idLocSelectNS>Select <u>n</u>amespace:</id>
								
                                <P class=Spacer 
                                >&nbsp;</P>
								
                                <select 
                                class=itemText id=NSPICKER 
                                style="WIDTH:400px;" accessKey=n 
                                onchange=OnChangeNS() align=left size=1 
                                name=NSPICKER 
                                TYPE="SELECT-ONE"> <option value=1 selected >root</option></select> 
                                <br 
                                ></SPAN>                             
                  
           		  <P CLASS="ElementSpacer15">&nbsp;</P>
				  
								<SPAN ID="SELECT_CLASS"
                                class=itemText TITLE="Select the class for which your object will supply instances and/or methods.">
								<id id=idLocSelectClass>Select c<u>l</u>ass:</id> 
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <input 
                                class=itemText oncut=OnInputKeyPress() 
                                onpaste=OnInputKeyPress() id=CLASSINPUT 
                                style="WIDTH:400px;" align=left size=400 
                                name=CLASSINPUT onkeypress="OnInputKeyPress()"> 
                                </SPAN> 
                                
                                <SPAN 
                                class=itemText><SELECT 
                                class=sideBtn3 id=CLASSPICKER 
                                ondblclick=OnClassDblClick(); 
                                style="WIDTH: 321px" accessKey=L 
                                onchange=OnChangeSelection(); size=4 
                                name=CLASSPICKER 
                                TYPE="SELECT-ONE"></SELECT></SPAN>
                                
                                <button 
                                class=buttons id=Clear accessKey=e TITLE="Clear the current selection."
                                onclick=onClearClick(); 
                                type="button" style="position:relative; top:-33px; left:4px;">Cl<u>e</u>ar</button> 
                                <button class=buttons id=Select accessKey=s TITLE="Accept the choice in the Select Class list and make it the currect selection." onclick=OnClassDblClick() type=button 
				style="position:relative; top:-23px; left:4px; float:right;"><u>S</u>elect</button>
                  
           		  <P CLASS="ElementSpacer2">&nbsp;</P>
                                
                                <SPAN id="CURRENT_SELECTION" TITLE="The provider object will supply instances and/or methods for this class."
                                class=itemText>
								<id id=idLocCurrentSelection>Current selection: </id>
                                <P class=Spacer>&nbsp;</P>
                                <textarea class=itemText id=CURRENTSELECTION style="OVERFLOW: visible; WIDTH: 400px; BACKGROUND-COLOR: inactiveborder" readOnly></textarea> 
                                </SPAN>
								</TD>
							  </TR>
							</TABLE>
						</TD>
								
                        <TD VALIGN="top" WIDTH="12">
							&nbsp; 
                        </TD>
					</TR>
					
					<TR VALIGN="TOP">
                        <TD VALIGN="TOP" WIDTH="12" HEIGHT="100%">
							&nbsp; 
                        </TD>
					</TR>
				</TABLE>
  		
	   	  <!--CLOSE OF CONTENT//-->
		  </TD>
		 </TR>
		 <TR VALIGN="bottom">
		  <TD HEIGHT="48">
	   	  <!--OPEN OF BUTTON HTML//-->
		  
		  	<TABLE HEIGHT="48" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			<COL WIDTH="12"><COL><COL WIDTH="75"><COL WIDTH="4"><COL WIDTH="75"><COL WIDTH="4"><COL WIDTH="75"><COL WIDTH="12">
			 <TR>
  			  <TD VALIGN="TOP" CLASS="RULE" COLSPAN="8" HEIGHT="2">
				<TABLE BORDER="0" WIDTH="100%" HEIGHT="1" CELLPADDING="0" CELLSPACING="0">
  	 			 <TR VALIGN="TOP">
  	  			  <TD HEIGHT="1" WIDTH="100%" BGCOLOR="buttonshadow"><IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="1" ALT=""></TD>
  	  			  <TD HEIGHT="1" WIDTH="1" BGCOLOR="window"><IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="1" ALT=""></TD>
  	 			 </TR>
				</TABLE>
  			  </TD>
 			  </TR>
 
 			  <TR>
  			  <TD VALIGN="TOP" HEIGHT="11" COLSPAN="8">
  				&nbsp;
  			  </TD>
 			 </TR>
 
 			<TR>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="12">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="TOP" HEIGHT="23">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="FinishBtn" TITLE="Validate entries and create class." onClick="OnFinish(document);" TYPE="BUTTON">Finish</BUTTON>
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="4">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="CancelBtn" TITLE="Close wizard without creating class.
" onClick="window.external.Finish(document, 'cancel');" TYPE="BUTTON">Cancel</BUTTON>
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="4">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="HelpBtn" TITLE="Bring up help for this wizard." onClick="window.external.OnHelp('vc.codewiz.wmi.atl.instance.wmiclass');" TYPE="BUTTON">Help</BUTTON>
  			  </TD>
  			  <TD VALIGN="center" HEIGHT="23" WIDTH="12">
  				&nbsp;
  			  </TD>
 			 </TR>
 
 			 <TR>
  			  <TD VALIGN="TOP" HEIGHT="12" COLSPAN="8">
  				&nbsp;
  			  </TD>
 			 </TR>
			</TABLE>
			
	   	  <!--CLOSE OF BUTTON HTML//-->
		  </TD>
		 </TR>
		</TABLE>
	
	   <!--CLOSE OF CONTENT AND BUTTON TABLE//-->
	   </TD>
	  </TR>
	 </TABLE>
	
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW TWO//-->
	</TD>
   </TR>
  </TABLE>
	
	</BODY>
</HTML>
<SCRIPT LANGUAGE="JSCRIPT">

var tab_array = new Array();
tab_array[0] = Default;
tab_array[1] = WMIClass;
tab_array[2] = Attributes;
//tab_array[3] = Properties;

var L_arCodeComments_Text = new Array();
L_arCodeComments_Text[0] = "//TODO: put appropriate value here";
L_arCodeComments_Text[1] = "//check that class name in the path is correct";
L_arCodeComments_Text[2] = "//create path parser object";
L_arCodeComments_Text[3] = "";
L_arCodeComments_Text[4] = "//parse path to find instance for method execution";
L_arCodeComments_Text[5] = "//Get values of key properties:";
L_arCodeComments_Text[6] = "//TODO: save vValue for later use";
L_arCodeComments_Text[7] = "//TODO: iterate through your data source to find the matching object";
L_arCodeComments_Text[8] = "//Get input arguments:";
L_arCodeComments_Text[9] = "//TODO: save input parameter value";
L_arCodeComments_Text[10] = "//The method has no input parameters";
L_arCodeComments_Text[11] = "//TODO: add code to execute the method here";
L_arCodeComments_Text[12] = "//get output parameters class";
L_arCodeComments_Text[13] = "//fill output parameters";
L_arCodeComments_Text[14] = "//TODO: fill variant with appropriate value";
L_arCodeComments_Text[15] = "// Send the output object back to the client via the sink";
L_arCodeComments_Text[16] = "//The method has no output parameters";
L_arCodeComments_Text[17] = "//Properties of the input parameters object:";
L_arCodeComments_Text[18] = "//Properties of the output parameters object:";

var locator;
var services;
var classSink = InternalGetObject("WbemScripting.SWbemSink");
var arClassNames; 
var dictLookup;  
var bRestoreClassSelection;
var bFirstLoad;
var strCurNamespace;

var dictCIM2VT = new ActiveXObject("Scripting.Dictionary");
dictCIM2VT.Add("2", "VT_I2"); 	//wbemCimtypeSint16
dictCIM2VT.Add("3", "VT_I4"); 	//wbemCimtypeSint32
dictCIM2VT.Add("4", "VT_R4"); 	//wbemCimtypeReal32
dictCIM2VT.Add("5", "VT_R8"); 	//wbemCimtypeReal64
dictCIM2VT.Add("8", "VT_BSTR"); 	//wbemCimtypeString
dictCIM2VT.Add("11", "VT_BOOL"); 	//wbemCimtypeBoolean
dictCIM2VT.Add("13", "VT_UNKNOWN"); //wbemCimtypeObject
dictCIM2VT.Add("16", "VT_I2"); 	//wbemCimtypeSint8	
dictCIM2VT.Add("17", "VT_UI1"); //wbemCimtypeUint8
dictCIM2VT.Add("18", "VT_I4"); 	//wbemCimtypeUint16 
dictCIM2VT.Add("19", "VT_I4"); 	//wbemCimtypeUint32 
dictCIM2VT.Add("20", "VT_BSTR"); 	//wbemCimtypeSint64 
dictCIM2VT.Add("21", "VT_BSTR"); 	//wbemCimtypeUint64 
dictCIM2VT.Add("101", "VT_BSTR"); //wbemCimtypeDatetime	
dictCIM2VT.Add("102", "VT_BSTR"); //wbemCimtypeReference 
dictCIM2VT.Add("103", "VT_I2"); //wbemCimtypeChar16 

var propPrefix = 	"s_pProp";
var methPrefix = 	"s_pMeth";
var inparmPrefix = 	"s_pIn";
var outparmPrefix = "s_pOut";

function InitDocument(document)
{
	bFirstLoad = window.external.FindSymbol("DOCUMENT_FIRST_LOAD");
	if (bFirstLoad)
	{
		window.external.SetDefaults(document);		
	}
	window.external.Load(document);
	
	locator = InternalGetObject("WbemScripting.SWbemLocator"); 
			
	EnumNamespaces("root", 1);
	
	CURRENTSELECTION.value = "";
	
	bRestoreClassSelection = true;
					
	//force selection of the last selected namespace and class
	//or the first elements in both listboxes
	RestoreNSSelection();
			
	OnChangeNS();	
}

function EnumNamespaces(name, num)
//recursively adds namespaces to the drop-down box
{
	
	try
	{
		services = locator.ConnectServer("", name);	
	}
	catch (e)
	{
		return;
	}
	

	var instances = new Enumerator(services.InstancesOf("__NAMESPACE"));

	for (; !instances.atEnd(); instances.moveNext() )
	{
		num++;
		var oOption = document.createElement("OPTION");
	
		NSPICKER.options.add(oOption);

		var NameOut;
		if (name != "")
		{
			NameOut = name + "\\" + instances.item().Name;
		}
		else
		{
			NameOut = instances.item().Name;
		} 

		oOption.innerText = NameOut;
		oOption.Value = num;
	
		EnumNamespaces(NameOut, num);							
	}
}

function OnChangeNS()
//clear array and dictionary, then call asynchronous class enumeration
{
	//clear CLASSPICKER and CLASSINPUT first
	while (CLASSPICKER.options.length > 0)
	{
		CLASSPICKER.options.remove(0);
	}				
	CLASSINPUT.value = "";		
	
	//clear class names array and dictionary
	arClassNames = ""; 
	arClassNames = new Array();
	dictLookup = "";
	dictLookup = new ActiveXObject("Scripting.Dictionary");
	
	//Display "Loading classes..." in the class list box
	var L_LoadingClsMsg_Text = "Loading classes...";
	var oOption = document.createElement("OPTION");		
	CLASSPICKER.options.add(oOption);							
	oOption.innerText = L_LoadingClsMsg_Text;			
	oOption.Value = 1;
	
	var strNS = NSPICKER[NSPICKER.selectedIndex].innerText;
	try
	{
		services = locator.ConnectServer("", strNS);
	}
	catch (e)
	{
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}				
		return;
	}
					
	document.body.style.cursor = 'wait';
	//services.SubclassesOfAsync(classSink); 
	
	var enumClasses = new Enumerator(services.SubclassesOf("",
									0, //wbemFlagReturnWhenComplete+wbemFlagQueryDeep,
									null)); 

	for (; !enumClasses.atEnd(); enumClasses.moveNext() )
	{		
	
		//Put each qualifying object's class name into an array (in the uppercase) 
		//and a dictionary, mapping uppercase and case-preservant names

		//Filter out abstract, system  and event classes.
		//Luckily, all event classes are abstract :)
		if (CheckBoolQualifier(enumClasses.item(), "abstract") || IsSystem(enumClasses.item()))
		{
			continue;
		}
				
		var NameOut = enumClasses.item().Path_.RelPath;
		arClassNames[arClassNames.length] = NameOut.toUpperCase();
		dictLookup.Add (NameOut.toUpperCase(), NameOut);
	}	
	
	//sort the uppercase array; pull case-preservant names from the dictionary 
	//and display them

	//clear "Loading..." text from CLASSPICKER		
	while (CLASSPICKER.options.length > 0)
	{
		CLASSPICKER.options.remove(0);
	}

	arClassNames.sort();
	
	for (i = 0; i < arClassNames.length; i++)		
	{			
		var oOption = document.createElement("OPTION");		
		CLASSPICKER.options.add(oOption);	
								
		oOption.innerText = dictLookup.Item(arClassNames[i]);			
		oOption.Value = i + 1;					
	}

	if (bRestoreClassSelection)		//first enumeration after InitDocument()
	{
		RestoreClassSelection();
		bRestoreClassSelection = false;
	}
	else
	{
		//force selection of the first class in the list
		CLASSPICKER.selectedIndex = 0;			
		OnChangeSelection();	
	}	
	
	document.body.style.cursor = 'default';
								
}

function OnInputKeyPress()
//selects best-matching class in the listbox
{    
	//update text immediately
	//CLASSINPUT.value += String.fromCharCode(event.keyCode);
		
	var strInput = CLASSINPUT.value.toUpperCase(); // + String.fromCharCode(event.keyCode).toUpperCase();
	
	//alert (strInput);
			
	var bLoopThrough = true;
		
	for (i = 0; i < CLASSPICKER.options.length; i++)
	{	
		var strListed = CLASSPICKER.options[i].innerText.toUpperCase();
		//alert (strListed);
				
		if (strListed >= strInput)
		{
			CLASSPICKER.selectedIndex = i;						
			bLoopThrough = false;
			break;
		}
	}		
	if (bLoopThrough)
	{
		//select the last line
		CLASSPICKER.selectedIndex = CLASSPICKER.options.length - 1;
	}
	
	//we already updated text, so no need to add the character again:		
	//event.returnValue=false;
}

function OnChangeSelection()
//display selected value in CLASSINPUT box
{
	if (CLASSPICKER.selectedIndex == -1)
	{
		return;
	}		
	
	var selectionValue = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
	
	//check to see if the selected string is a class name (i.e., appears in the map)
	if (!dictLookup.Exists(selectionValue.toUpperCase())) 
	{
		return;
	}
	
	CLASSINPUT.value = selectionValue;		
}

function OnClassDblClick()
{
	if (NSPICKER.options.length == 0 || CLASSPICKER.options.length ==0)
	{
		return;
	}

	var selNamespace = NSPICKER[NSPICKER.selectedIndex].innerText;
	var selClassName = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
	
	//see if the class already has a "provider" qualifier and warn
	var classObj = services.Get(selClassName);	
	var strCurrentProv = GetCurrentProviderName(classObj);
	if (strCurrentProv != "")
	{
		var L_provWarMsg_Text = "Warning: this class already has a provider: ";
		var L_provWarMsg2_Text = ". Replacing the existing provider could destabilize your system. Are you sure you want to do this?";
		
		var bReplaceProv = confirm (L_provWarMsg_Text + strCurrentProv + L_provWarMsg2_Text);
		if (!bReplaceProv)
		{
			return;
		}
	}
	
	var selectionValue = selNamespace + " : " +	selClassName;								
	
	//check to see if the selected string is a class name (i.e., appears in the map)
	if (!dictLookup.Exists(selClassName.toUpperCase())) 
		return;
		
	CURRENTSELECTION.value = selectionValue;
	CURRENTSELECTION.test = "";
	NAMESPACE.value = selNamespace;
	WMICLASSNAME.value = selClassName;

	strCurNamespace = selNamespace;
			
}

function Next(document, linkto)
{
	GetWMIClassInfo();
	bGetClassInfo = true;
	window.external.Next(document, linkto);
}


function OnFinish(document)
{
	GetWMIClassInfo();
	bGetClassInfo = true;

	if (window.external.FindSymbol("SHORT_NAME").length == 0)
	{
		var L_ErrMsg1_Text = "Need to specify a short name.";
		window.external.ReportError(L_ErrMsg1_Text);
		Next(document, "default.htm");
		return;
	}

	if (window.external.FindSymbol("ATTRIBUTED") == true)
		if (!ConvertProjectToAttributed())
			return;

	OnWizFinish(document);
}

function InternalGetObject(progID)
{
	var broker = new ActiveXObject("WMIScriptUtils.WMIObjectBroker");
	if (broker.CanCreateObject(progID))
	{
		return broker.CreateObject(progID);
	}
	else
	{
		try
		{
			var registrar = new ActiveXObject("WMIScriptUtils.WMIObjectBrokerRegistration");
			if(registrar == null)
			{
				return;
			}
  			registrar.Register(progID);
  			return broker.CreateObject(progID);
		}
		catch(e)
		{
			return;
		}
	}
}

function RestoreNSSelection()
{
	strCurNamespace = NAMESPACE.value;
	//select saved namespace in NSPICKER
	for (i = 0; i < NSPICKER.options.length; i++)
	{	
		var strCurrent = NSPICKER.options[i].innerText;
		if (strCurrent == NAMESPACE.value) 
		{
			NSPICKER.selectedIndex = i;	
			
			//fill CURRENTSELECTION box:
			CURRENTSELECTION.value = NAMESPACE.value + " : ";				
			return;
		}
	}	
	//or, just select the first index
	NSPICKER.selectedIndex = 0;
								
}

function RestoreClassSelection()
{
	var bRestored = false;
	
	//select saved class in CLASSPICKER
	for (i = 0; i < CLASSPICKER.options.length; i++)
	{	
		var strCurrent = CLASSPICKER.options[i].innerText;
		if (strCurrent == WMICLASSNAME.value) 
		{
			CLASSPICKER.selectedIndex = i;
			
			//fill CURRENTSELECTION box:
			CURRENTSELECTION.value += WMICLASSNAME.value;	
			
			bRestored = true;				
			break;
		}
	}
	
	//or, just select the first index
	if (!bRestored)
	{
		CLASSPICKER.selectedIndex = 0;
	}
										
	//update CLASSINPUT
	OnChangeSelection();
}


function IsSystem(objObject)
{
	try 
	{
		var NameOut = objObject.Path_.RelPath;
				
		return (NameOut.slice(0, 2).toString() == "__");				
	}
	catch(e)
	{
		return false;
	}				
}

function CheckBoolQualifier (obj, qualName)
{
try 
	{
		var qual = obj.Qualifiers_(qualName);	
			
		return (qual.Value);
	}
	catch(e)
	{
		//NOTE that if the qualifier is not present, "Not found" will be returned
		//Return false in this case
		return false;
	}				
}

function GetCurrentProviderName (obj)
{
//checks if the class already has a "provider" qualifier value and returns it.
//if the class doesn't have a "provider" qualifier or its value is empty, an empty string is 
//returned.
try 
	{
		var qual = obj.Qualifiers_("provider");	
					
		return (qual.Value.toString());
	}
	catch(e)
	{
		//NOTE that if the qualifier is not present, "Not found" will be returned
		//Return empty string in this case
		return "";
	}				
}

function GetWMIClassInfo()
{
	if (WMICLASSNAME.value == "")
		return;		

	if(strCurNamespace == "" || strCurNamespace == null)
	{
		return;
	}

	// Get the services for the selected class
	// Namespace in the list box might be changed and this would have changed 
	// the services pointer
	try
	{
		services = locator.ConnectServer("", strCurNamespace);
	}
	catch(e)
	{
		return;
	}
	
	var strStaticDecls = "";
	var strStaticDefs = "";
	var strInstancePopulation = "";
	
	var classObj = services.Get(WMICLASSNAME.value);
			
	var props = new Enumerator (classObj.Properties_);
	var nKeys = 0;
	var nAddTab = false;
	
	for (; !props.atEnd(); props.moveNext() )
	{
		if (CheckBoolQualifier(props.item(), "key"))
			nKeys++;
		
		strStaticDecls += "extern const WCHAR * " + propPrefix + props.item().Name + ";\n\r";
		strStaticDefs += "const static WCHAR * " + propPrefix + props.item().Name +
									" = L\"" + props.item().Name + "\";\n\r";
									
		var vt = dictCIM2VT.Item(props.item().CIMType.toString());
		if (props.item().IsArray) {
			vt += " | VT_ARRAY";
		}
		
		if(nAddTab)
		{
			strInstancePopulation  += "\t";	
		}
		strInstancePopulation  += "var.ChangeType(" + vt + ");\n\r";
		strInstancePopulation  += "	//var = <value>; " + L_arCodeComments_Text[0] + "\n\r";
		strInstancePopulation  += "	hr = pNewInst->Put(CComBSTR(" + propPrefix +
								props.item().Name	+ "), 0, &var, 0);\n\r";
		strInstancePopulation  += "	var.Clear();\n\r\n\r";
		nAddTab = true;								
	}	
				
	window.external.AddSymbol("PROPERTY_DEFINITIONS", strStaticDefs);
	window.external.AddSymbol("PROPERTY_DECLARATIONS", strStaticDecls);
	window.external.AddSymbol("POPULATE_INSTANCE", strInstancePopulation);
	window.external.AddSymbol("IS_COMPOUND_KEY", (nKeys > 1).toString());
	
	//find if the object is a singleton
	var bSingleton = CheckBoolQualifier(classObj, "Singleton");
	window.external.AddSymbol("IS_SINGLETON", bSingleton);
	
	GetMethodInfo(classObj);
}

function GetMethodInfo(classObj)
{
	if (WMICLASSNAME.value == "")
		return;		
	
	var strMethDeclarations = "";
	var strMethDefinitions = "";
	var strExecMethodBody = "";
	//find if the object has any methods
	var eMeths = new Enumerator (classObj.Methods_);		
	var bStatic, bImplemented, bSingleton;
	
	strExecMethodBody += "	" + L_arCodeComments_Text[1] + "\n\r";
	strExecMethodBody += "	" + L_arCodeComments_Text[2] + "\n\r";
	
	strExecMethodBody += "	HRESULT hr = S_OK;\n\r";
	strExecMethodBody += "	CComPtr<IWbemPath>pPath;\n\r";
	strExecMethodBody += "	hr = m_pPathFactory->CreateInstance(NULL,\n\r" +
							"					IID_IWbemPath,\n\r" +
							"					(void **) &pPath);\n\r";
	strExecMethodBody += "	if (FAILED(hr))\n\r	{\n\r		return WBEM_E_FAILED;\n\r	}\n\r" 
					
    strExecMethodBody += "	pPath->SetText(WBEMPATH_CREATE_ACCEPT_ALL, strObjectPath);\n\r";
    strExecMethodBody += "	long nPathLen = CComBSTR(strObjectPath).Length();\n\r";
    strExecMethodBody += "	ULONG ulBufLen = nPathLen;\n\r";	
	strExecMethodBody += "	WCHAR * wClass = new WCHAR[nPathLen];\n\r";
	strExecMethodBody += "	if (NULL == wClass)\n\r	{\n\r		return WBEM_E_OUT_OF_MEMORY;\n\r	}\n\r";
	strExecMethodBody += "	pPath->GetClassName(&ulBufLen, wClass);\n\r";
	strExecMethodBody += "	if ( _wcsicmp(s_pMyClassName, wClass))\n\r	{\n\r";
	strExecMethodBody += "		delete[] wClass;\n\r";
	strExecMethodBody += "		return WBEM_E_INVALID_PARAMETER;\n\r\	}\n\r";	
	strExecMethodBody += "	delete[] wClass;\n\r";		
				
	for (var nMeths = 0, nImplMeths = 0; !eMeths.atEnd(); eMeths.moveNext(), nMeths++ )
	{
		strMethDeclarations += "\n\r//" + eMeths.item().Name + "\n\r";
		strMethDefinitions +=  "\n\r//" + eMeths.item().Name + "\n\r";
		
		strMethDeclarations += "extern const WCHAR * " + methPrefix + eMeths.item().Name + ";\n\r";
		strMethDefinitions +=  "const static WCHAR * " + methPrefix + eMeths.item().Name +
									" = L\"" + eMeths.item().Name + "\";\n\r";

		bImplemented = CheckBoolQualifier(eMeths.item(), "implemented");
		if (bImplemented) 	
			nImplMeths++;
		else
			continue;
			
		bStatic = CheckBoolQualifier(eMeths.item(), "static");
		bSingleton = CheckBoolQualifier(classObj, "singleton");			
					
		strExecMethodBody += "	if (!_wcsicmp (strMethodName, " + methPrefix + 
								eMeths.item().Name + "))\n\r	{\n\r";			
					
		if (!bStatic && !bSingleton) 
		{			
			strExecMethodBody += "		" + L_arCodeComments_Text[4] + "\n\r";
			
			strExecMethodBody += "		CComPtr<IWbemPathKeyList> pIKeyList;\n\r";
			strExecMethodBody += "		hr = pPath->GetKeyList(&pIKeyList);\n\r";
			strExecMethodBody += "		if (FAILED(hr))\n\r		{\n\r";
			strExecMethodBody += "			return WBEM_E_INVALID_PARAMETER;\n\r		}\n\r";

			strExecMethodBody += "		ULONG ulNumKeys;\n\r";
			strExecMethodBody += "		hr = pIKeyList->GetCount(&ulNumKeys);\n\r";

			strExecMethodBody += "		" + L_arCodeComments_Text[5] + "\n\r"; 
			strExecMethodBody += "		unsigned long uKeyNameBufferSize = nPathLen;\n\r";
			strExecMethodBody += "		WCHAR  * wKeyName = new WCHAR[uKeyNameBufferSize];\n\r";
			strExecMethodBody += "		if (NULL == wKeyName)\n\r	{\n\r		return WBEM_E_OUT_OF_MEMORY;\n\r	}\n\r";
			strExecMethodBody += "		CComVariant vValue;\n\r";				
			strExecMethodBody += "		ULONG ulApparentCimType;\n\r";
			strExecMethodBody += "		for (ULONG i = 0; i < ulNumKeys; i++)\n\r		{\n\r";
			strExecMethodBody += "			hr = pIKeyList->GetKey2(i, 0L, &uKeyNameBufferSize,\n\r"; 				
			strExecMethodBody += "									wKeyName, &vValue, &ulApparentCimType);\n\r";
			strExecMethodBody += "			" + L_arCodeComments_Text[6] + "\n\r		}\n\r";			
			strExecMethodBody += "		delete[] wKeyName;\n\r";				
			strExecMethodBody += "		" + L_arCodeComments_Text[7]+ "\n\r\n\r";
        }   			        
        	    
		strExecMethodBody += "		CComVariant var;\n\r";	
		
		//enumerate properties of the input parameters object
		
		strMethDeclarations += L_arCodeComments_Text[17] + "\n\r";
		strMethDefinitions +=  L_arCodeComments_Text[17] + "\n\r";
							
		var oInParams = eMeths.item().InParameters;
		if (oInParams) 
		{																		
			strExecMethodBody += "		" + L_arCodeComments_Text[8] + "\n\r";					
							
			var inParms = new Enumerator (oInParams.Properties_);
			for (; !inParms.atEnd(); inParms.moveNext() )
			{		
				strMethDeclarations += "extern const WCHAR * " + inparmPrefix + eMeths.item().Name + 
									inParms.item().Name  + ";\n\r";
									
				strMethDefinitions +=  "const static WCHAR * " + inparmPrefix + eMeths.item().Name +
									inParms.item().Name + " = L\"" + inParms.item().Name + "\";\n\r";
												
				strExecMethodBody  += "		hr = pInParams->Get(" + inparmPrefix + 
									eMeths.item().Name + inParms.item().Name +
									", 0, &var, NULL, NULL);\n\r";											
				strExecMethodBody  += "		" + L_arCodeComments_Text[9] + "\n\r";					
				strExecMethodBody  += "		var.Clear();\n\r\n\r";						
			}
		}			
		else 
		{
			strExecMethodBody  += "		" + L_arCodeComments_Text[10] + "\n\r";
		}
				
		strExecMethodBody += "		" + L_arCodeComments_Text[11] + "\n\r\n\r";
								
		//deal with the output parameters object	
		strMethDeclarations += L_arCodeComments_Text[18] + "\n\r";
		strMethDefinitions +=  L_arCodeComments_Text[18] + "\n\r";
					
		var oOutParams = eMeths.item().OutParameters;
		if (oOutParams) 
		{
									
			strExecMethodBody += "		" + L_arCodeComments_Text[12] + "\n\r";
			strExecMethodBody += "		CComPtr<IWbemClassObject> pOutClass;\n\r";
			strExecMethodBody += "		hr = m_pClass->GetMethod(" + methPrefix +
										eMeths.item().Name + 
										", 0, NULL, &pOutClass);\n\r";

			strExecMethodBody += "		CComPtr<IWbemClassObject> pOutParams;\n\r";
			strExecMethodBody += "		pOutClass->SpawnInstance(0, &pOutParams);\n\r\n\r";
							
			strExecMethodBody += "		" + L_arCodeComments_Text[13] + "\n\r";						
							
			var outParms = new Enumerator (oOutParams.Properties_);	
			for (; !outParms.atEnd(); outParms.moveNext() )
			{		
				strMethDeclarations += "extern const WCHAR * " + outparmPrefix + eMeths.item().Name + 
									outParms.item().Name  + ";\n\r";
									
				strMethDefinitions +=  "const static WCHAR * " + outparmPrefix + eMeths.item().Name +
									outParms.item().Name + " = L\"" + outParms.item().Name + "\";\n\r";
						
				var vt = dictCIM2VT.Item(outParms.item().CIMType.toString());
				if (outParms.item().IsArray) {
					vt += " | VT_ARRAY";
				}					
										
				strExecMethodBody  += "		var.ChangeType(" + vt + ");\n\r";
				strExecMethodBody  += "		" + L_arCodeComments_Text[14] + "\n\r";
				strExecMethodBody  += "		hr = pOutParams->Put(CComBSTR(" + outparmPrefix + 
											eMeths.item().Name + outParms.item().Name	+ 
											"), 0, &var, 0);\n\r";				
				
				strExecMethodBody  += "		var.Clear();\n\r\n\r";						
			}								
			strExecMethodBody  += "		" + L_arCodeComments_Text[15] + "\n\r"; 
			strExecMethodBody  += "		hr = pResponseHandler->Indicate(1, &(pOutParams.p));\n\r\n\r";								
		}
		else
		{
			strExecMethodBody  += "		" + L_arCodeComments_Text[16] + "\n\r\n\r";
		}
		strExecMethodBody += "		pResponseHandler->SetStatus(0, WBEM_S_NO_ERROR, NULL, NULL);\n\r";
		strExecMethodBody += "		return WBEM_S_NO_ERROR;\n\r";			
		strExecMethodBody += "	}\n\r";										
	}
	
	strExecMethodBody += "	return WBEM_E_NOT_SUPPORTED;\n\r";
	
	
	window.external.AddSymbol("HAS_METHODS", (nMeths > 0).toString());
	
	HAS_IMPL_METHODS.checked = (nImplMeths > 0);
	
	window.external.AddSymbol("PROVIDE_METHODS", HAS_IMPL_METHODS.checked);		
					
	window.external.AddSymbol("EXEC_METHOD_BODY", strExecMethodBody);	
	
	window.external.AddSymbol("METHOD_DEFINITIONS", strMethDefinitions);
	window.external.AddSymbol("METHOD_DECLARATIONS", strMethDeclarations);
}

function onClearClick()
{
	CURRENTSELECTION.value = "";
	CURRENTSELECTION.test = "";
	WMICLASSNAME.value = "";
	strCurNamespace = "";

}

</SCRIPT>
<SCRIPT ID="INCLUDE_SCRIPT" LANGUAGE="JSCRIPT">
</SCRIPT>
<SCRIPT ID="INCLUDE_COMMON" LANGUAGE="JSCRIPT">
</SCRIPT>
<SCRIPT>
	var strPath = "../../../../../";
	strPath += window.external.GetHostLocale();
	var strScriptPath = strPath + "/Script.js";
	var strCommonPath = strPath + "/Common.js";
	document.scripts("INCLUDE_SCRIPT").src = strScriptPath;
	document.scripts("INCLUDE_COMMON").src = strCommonPath;
</SCRIPT>
