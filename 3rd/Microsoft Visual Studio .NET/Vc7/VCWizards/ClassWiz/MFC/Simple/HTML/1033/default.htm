<!- (c) 2001 Microsoft Corporation -->
<HTML DIR="LTR">

<HEAD>
	<TITLE>MFC Class Wizard</TITLE>
	<META NAME="vs_targetSchema" CONTENT="http://schemas.microsoft.com/intellisense/ie5">
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
	<STYLE TYPE="text/css">@import url();</STYLE>
	<SCRIPT>
		var strURL = "../../../../../";
		strURL += window.external.GetHostLocale();
		strURL += "/NewStyles.css";
		document.styleSheets(0).imports(0).href = strURL;
	</SCRIPT>

	<SYMBOL NAME="CLASS_NAME_ROOT" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="CLASS_NAME" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="BASE_CLASS" TYPE="text" VALUE="CWnd"></SYMBOL>
	<SYMBOL NAME="HEADER_FILE" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="IMPL_FILE" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="HEADER_FILE_VALID" TYPE="bool" VALUE="false"></SYMBOL>
	<SYMBOL NAME="IMPL_FILE_VALID" TYPE="bool" VALUE="false"></SYMBOL>
	<SYMBOL NAME="INCLUDE_HEADER" TYPE="text" VALUE=""></SYMBOL>

	<SYMBOL NAME="IDD_DIALOG" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="CREATE_DIALOG" TYPE="checkbox" VALUE="false"></SYMBOL>

	<SYMBOL NAME="AUTOMATION_NONE" TYPE=radio VALUE="true"></SYMBOL>
	<SYMBOL NAME="AUTOMATION" TYPE=radio VALUE="false"></SYMBOL>
	<SYMBOL NAME="CREATABLE" TYPE=radio VALUE="false"></SYMBOL>
	<SYMBOL NAME="TYPEID" TYPE="text" VALUE=""></SYMBOL>

	<SYMBOL NAME="TEMPLATE_HEADER" TYPE="text" VALUE="window.h"></SYMBOL>
	<SYMBOL NAME="TEMPLATE_IMPL" TYPE="text" VALUE="window.cpp"></SYMBOL>

	<SYMBOL NAME="DISPIID_STATIC_CONST_GUID_FORMAT" TYPE="text"></SYMBOL>
	<SYMBOL NAME="DISPIID_REGISTRY_FORMAT" TYPE="text"></SYMBOL>
	<SYMBOL NAME="CLSID_REGISTRY_FORMAT" TYPE="text"></SYMBOL>
	<SYMBOL NAME="CLSID_IMPLEMENT_OLECREATE_FORMAT" TYPE="text"></SYMBOL>

	<SYMBOL NAME="ACCESSIBILITY" TYPE="checkbox" VALUE="false"></SYMBOL>

	<SYMBOL NAME="COLESERVERDOC" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="COLECLIENTITEM" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CCOLORDIALOG" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CCONNECTIONPOINT" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CDOCOBJECTSERVER" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CDOCOBJECTSERVERITEM" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CFILEDIALOG" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CFONTDIALOG" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CPAGESETUPDIALOG" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CPRINTDIALOG" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CINTERNETSESSION" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CPROPERTYPAGE" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CCONTROLBAR" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="CVIEW" TYPE="checkbox" VALUE="false"></SYMBOL>
		
	<SYMBOL NAME="HTML_FILE" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="HTML_FILE_VALID" TYPE="bool" VALUE="false"></SYMBOL>
	<SYMBOL NAME="HTML_ID" TYPE="text" VALUE=""></SYMBOL>

	<SYMBOL NAME="MAX_DOC_TYPE_NAME" TYPE="num" VALUE=15></SYMBOL>
	<SYMBOL NAME="MAX_FILE_NEW_NAME_SHORT" TYPE="num" VALUE=15></SYMBOL>
	<SYMBOL NAME="MAX_FILE_TYPE_ID" TYPE="num" VALUE=39></SYMBOL>
	<SYMBOL NAME="MAX_FILE_NEW_NAME_LONG" TYPE="num" VALUE=40></SYMBOL>
	<SYMBOL NAME="MAX_FILTER_NAME" TYPE="num" VALUE=100></SYMBOL>
	<SYMBOL NAME="DOCUMENT_TYPE_NAME" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="DOCUMENT_FILE_EXTENSION" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="DOCUMENT_FILE_TYPE_ID" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="DOCUMENT_FILE_NEW_NAME_SHORT" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="DOCUMENT_FILE_NEW_NAME_LONG" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="DOCUMENT_FILTER_NAME" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="DOCUMENT_MAIN_FRAME_CAPTION" TYPE="text" VALUE=""></SYMBOL>

	<SYMBOL NAME="MERGE_FILE" TYPE="bool" VALUE="false"></SYMBOL>
	<SYMBOL NAME="GEN_DOCTEMPLATE" TYPE="checkbox" VALUE="false"></SYMBOL>
	<SYMBOL NAME="DOCUMENT_CLASS" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="FRAME_CLASS" TYPE="text" VALUE=""></SYMBOL>
	<SYMBOL NAME="MDI_APP" TYPE="bool" VALUE="false"></SYMBOL>
</HEAD>

<BODY BGCOLOR="BUTTONFACE" TOPMARGIN="0" LEFTMARGIN="0" RIGHTMARGIN="0" BOTTOMMARGIN="0" ONLOAD="InitDocument(document);" ONKEYDOWN="OnKey();" ONKEYPRESS="OnPress();">

<TABLE CLASS="ONE" HEIGHT="100%" WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
<COL WIDTH="178"><COL>

  <!--OPEN OF INTRODUCTORY INFORMATION TABLE//-->
  <TR VALIGN="TOP">
	<TD HEIGHT="79" WIDTH="100%" COLSPAN="2">
	 <TABLE CLASS="TWO" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	 <COL WIDTH="12"><COL><COL WIDTH="12">
	  <TR>
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="12">
	  	&nbsp;
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="12">
	  	&nbsp;
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="12">
	  	&nbsp;
	   </TD>
  
	   <TD CLASS="IMAGE" VALIGN="BOTTOM" WIDTH="110" ROWSPAN="2">
		<DIV CLASS="SMALLA" ID="Layer0">
		 <IMG CLASS="SMALLEST" SRC="../../Images/MFCClass_1.gif" WIDTH="63" HEIGHT="63" ALT="" BORDER="0">
		</DIV>
	   </TD>

	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="6" ROWSPAN="2">
	  	&nbsp;
	   </TD>
	  </TR>
	 
	  <TR>
	   <TD VALIGN="TOP" HEIGHT="65" WIDTH="12">
	  	&nbsp;
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="65">
		<H4 CLASS="HEAD" ID="HEAD">Welcome to the MFC Class Wizard</H4>
		<P CLASS="SUBHEAD" ID="SUBHEAD">This wizard adds a class that inherits from MFC to your project.  Options may change depending on the base class selected.</P>
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="65" WIDTH="12">
	  	&nbsp;
	   </TD>
	  </TR>
	 
	  <TR>
	   <TD VALIGN="TOP" CLASS="RULE" COLSPAN="5" HEIGHT="2">
		<TABLE BORDER="0" WIDTH="100%" HEIGHT="1" CELLPADDING="0" CELLSPACING="0">
	  	 <TR VALIGN="TOP">
	  	  <TD HEIGHT="1" WIDTH="100%" BGCOLOR="BUTTONSHADOW"></TD>
	  	  <TD HEIGHT="1" WIDTH="1" BGCOLOR="WINDOW"></TD>
	  	 </TR>
		</TABLE>
	   </TD>
	  </TR>
	 </TABLE>
	</TD>
  </TR>
  <!--CLOSE OF INTRODUCTORY INFORMATION TABLE//-->

  <!--OPEN OF NAVIGATION, CONTENT, AND BUTTON TABLES//-->
  <TR VALIGN="TOP">
	<TD CLASS="Three" VALIGN="TOP" HEIGHT="100%" WIDTH="178">
	 <TABLE CLASS="fixedSize" HEIGHT="100%" WIDTH="178" BORDER="0" CELLPADDING="0" CELLSPACING="0">
  	  <TR VALIGN="TOP">
	   <TD CLASS="threeCustom" VALIGN="TOP" STYLE="BACKGROUND-IMAGE: URL(../../Images/MFCClassBG.gif);">
	   <!--OPEN OF NAVIGATION TABLE//-->

	    <TABLE CLASS="THREE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		<COL WIDTH="12"><COL WIDTH="166"><COL WIDTH="1">
		 <TR>
	   	  <TD VALIGN="TOP" COLSPAN="3" HEIGHT="12">
	  		&nbsp;
		  </TD>
		 </TR>
		 <TR>
	   	  <TD VALIGN="TOP" HEIGHT="100%" WIDTH="12">
	  		&nbsp;
		  </TD>
	   	  <TD VALIGN="TOP" HEIGHT="100%" WIDTH="165">
	   	  <!--OPEN OF NAVIGATIONAL LINKS//-->

		  	<DIV CLASS="LINKSELECTED">
	 	   	 <SPAN CLASS="VERTLINE1">
			  <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0">
			 </SPAN>
			 <SPAN CLASS="HORILINE1">
			  <TABLE WIDTH="167" HEIGHT="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			   <TR VALIGN="TOP">
			    <TD CLASS="DOTTEDLINE" HEIGHT="1">
				</TD>
			   </TR>
			   <TR VALIGN="TOP">
			    <TD HEIGHT="100%">
				 <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="28" ALT="" BORDER="0">
			    </TD>
			   </TR>
			   <TR VALIGN="TOP">
			    <TD CLASS="DOTTEDLINE" HEIGHT="1">
			    </TD>
			   </TR>
			  </TABLE>
			 </SPAN>
			 <TABLE WIDTH="160" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXTSELECTED">
			  <TR VALIGN="MIDDLE">
			   <TD WIDTH="156">
				<SPAN ID="Default" TITLE="Specify class and file names as well as type of class to create.">Names</SPAN>
			   </TD>
			   <TD WIDTH="4">
				<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
	  		
			<DIV CLASS="LINK">
			 <TABLE WIDTH="166" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXT">
			  <TR VALIGN="MIDDLE">
	  		   <TD WIDTH="162">
				<SPAN CLASS="ACTIVELINK" ID="DocTemp" TITLE="Specify values for your application's document template to use when creating a new document. Only enabled if base class is CFormView and 'Generate DocTemplate resources' is checked." onClick="if (this.className.toLowerCase() == 'inactivelink') return; Next(document, 'DocTemp.htm');" TABINDEX="1">Document Template Strings</SPAN>
			   </TD>
	  		   <TD WIDTH="4">
			  	<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
			
	   	  <!--CLOSE OF NAVIGATIONAL LINKS//-->
		  </TD>
		  <TD WIDTH="1">
		   <DIV CLASS="VERTLINE">
			 <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0">
		   </DIV>
		  </TD>
		 </TR>
		 </TABLE>
		</TD>
	   </TR>
	   </TABLE>
			
	   <!--CLOSE OF NAVIGATION TABLE//-->
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="100%">
	   <!--OPEN OF CONTENT AND BUTTON TABLE//-->
	   
	   	<TABLE CLASS="ONE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		<COL WIDTH="100%">
		 <TR VALIGN="TOP">
		  <TD HEIGHT="100%">
	   	  <!--OPEN OF CONTENT//-->
		  
		  	<TABLE CLASS="CONTENT" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			<COL WIDTH="12"><COL WIDTH="193"><COL WIDTH="12"><COL WIDTH="193"><COL WIDTH="12">
 			 <TR>
  			  <TD VALIGN="TOP" HEIGHT="12" COLSPAN="3">
  				&nbsp;
  			  </TD>
 			 </TR>
 			 <TR>
 			 <TD VALIGN="TOP" WIDTH="12">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="TOP">
 				<SPAN CLASS="itemTextTop" ID="CLASS_NAME_SPAN" TITLE="Name of new class that will be created.">
	  	 			 <LABEL FOR="CLASS_NAME" ID="CLASS_NAME_LABEL">C<U>l</U>ass name:</LABEL>
	  	 			 <BR>
	  	 			 <INPUT CLASS="sideBtn" ID="CLASS_NAME" TYPE="text" ACCESSKEY="l" VALUE="" onPropertychange="OnClass();">
				</SPAN>
	
				<P CLASS="ElementSpacer16">&nbsp;</P>
					 
				<SPAN CLASS="itemText" ID="BASE_CLASS_SPAN" TITLE="Name of class that new class will derive from.">
					 <LABEL FOR="BASE_CLASS" ID="BASE_CLASS_LABEL"><U>B</U>ase class:</LABEL>
					 <BR>
					 <SELECT CLASS="sideBtn" ID="BASE_CLASS" SIZE="1" ACCESSKEY="b" onChange="OnBase();">
					 </SELECT>
				</SPAN>
	
				<P CLASS="ElementSpacer6">&nbsp;</P>
					 
				<SPAN CLASS="itemText" ID="IDD_DIALOG_SPAN" TITLE="ID of dialog resource. Typing in an ID will create a new dialog resource. You can also select from the list if an existing one is available. Only enabled if base class is one of the following: CDialog, CFormView, COlePropertyPage, CPropertyPage or CDHtmlDialog.">
					 <LABEL ID="idd_dialog_title" ACCESSKEY="d" FOR="DialogList"><U>D</U>ialog ID:</LABEL>
					 <BR>
					 <INPUT CLASS="sideBtn" ID="IDD_DIALOG" TYPE="HIDDEN"></INPUT>
					 <OBJECT CLASS="itemText" ID="DialogList" ACCESSKEY="d" CLASSID="CLSID:B4455841-B9A9-441C-B069-A7B98884E2FB">
					 </OBJECT>
				 </SPAN>
					
				<P CLASS="ElementSpacer6">&nbsp;</P>
					 
  				<NOBR>
				  <SPAN CLASS="itemText" ID="HEADER_FILE_SPAN" TITLE="Name of header file where class will be defined.">
	  	 			<LABEL FOR="HEADER_FILE" ID="HEADER_FILE_LABEL">.h f<U>i</U>le:</LABEL>
	  	 			<BR>
	  	 			<INPUT CLASS="sideBtn2" ID="HEADER_FILE" ACCESSKEY="i" NAME="IsapiDirectoryName" TYPE="text" onPropertychange="window.external.AddSymbol('HEADER_FILE_VALID', false);">
					<BUTTON CLASS="buttonClass3Custom" ID="BrowseHeaderBtn" TYPE="BUTTON" TITLE="Browse for header file." onClick="OnBrowseHeaderFile();">...</BUTTON>
				  </SPAN>
				</NOBR>
					
				<P CLASS="ElementSpacer6">&nbsp;</P>
					 
  				<NOBR>
				  <SPAN CLASS="itemText" ID="IMPL_FILE_SPAN" TITLE="Name of implementation file for this class.">
	  	 			<LABEL FOR="IMPL_FILE" ID="IMPL_FILE_LABEL">.c<U>p</U>p file:</LABEL>
	  	 			<BR>
	  	 			<INPUT CLASS="sideBtn2" ID="IMPL_FILE" ACCESSKEY="p" TYPE="text"  onPropertychange="window.external.AddSymbol('IMPL_FILE_VALID', false);">
					<BUTTON CLASS="buttonClass3Custom" ID="BrowseImplBtn" TYPE="BUTTON" TITLE="Browse for implementation file." onClick="OnBrowseImplFile();">...</BUTTON>
				  </SPAN>
				</NOBR>
						
				<P CLASS="ElementSpacer16">&nbsp;</P>
				
				<SPAN CLASS="itemText" ID="ACCESSIBILITY_SECTION" TITLE="Enables Active Accessibility support.">
	  				 <INPUT CLASS="CheckBox" TYPE="checkbox" ID="ACCESSIBILITY" ACCESSKEY="y">
	  	 			 <DIV CLASS="itemTextCheckboxA">
		  			  <LABEL FOR="ACCESSIBILITY" ID="ACCESSIBILITY_LABEL">Active accessibilit<U>y</U></LABEL>
	  	 			 </DIV>
				</SPAN>
			  </TD>
  		  	  <TD VALIGN="TOP" WIDTH="12">
  				&nbsp;
  		  	  </TD>
			  <TD VALIGN="TOP">
 				<SPAN CLASS="itemTextTop" ID="HTML_ID_SPAN" TITLE="ID of HTML resource. Only enabled if base class is CDHtmlDialog.">
	  	 			  <LABEL FOR="HTML_ID" ID="HTML_ID_LABEL">DHTML re<U>s</U>ource ID:</LABEL>
					  <BR>
	  	 			  <INPUT CLASS="sideBtn" ID="HTML_ID" TYPE="text" ACCESSKEY="s">
				</SPAN>
	
				<P CLASS="ElementSpacer16">&nbsp;</P>
					 
  				<SPAN CLASS="itemText" ID="HTML_FILE_SPAN" TITLE="Name of HTML file. Only enabled if base class is CDHtmlDialog">
	  	 			 <LABEL FOR="HTML_FILE" ID="HTML_FILE_LABEL">.HT<U>M</U> file:</LABEL>
					 <BR>
	  	 			 <INPUT CLASS="sideBtn" ID="HTML_FILE" ACCESSKEY="m" TYPE="text"  onPropertychange="window.external.AddSymbol('HTML_FILE_VALID', false);">
				</SPAN>

				<P CLASS="ElementSpacer16">&nbsp;</P>
	 
				 <SPAN CLASS="itemText">
					 <SPAN CLASS="itemText" ID="automation_options_title">Automation:</SPAN>
					 <P CLASS="Spacer">&nbsp;</P>
	
 					 <SPAN ID="AUTOMATION_NONE_SPAN" TITLE="Class doesn't support automation.">
	  				 <INPUT TYPE="radio" CLASS="Radio" NAME="automation" ID="AUTOMATION_NONE" ACCESSKEY="n">
	  	 			 <DIV CLASS="itemTextRadioB">
							<LABEL FOR="AUTOMATION_NONE" ID="AUTOMATION_NONE_LABEL"><U>N</U>one</LABEL>
	  	 			 </DIV>
					 </SPAN>
	  
	  				 <BR>
	  
 					 <SPAN ID="AUTOMATION_SPAN" TITLE="Class supports automation.">
	  			 	 <INPUT TYPE="radio" CLASS="Radio" NAME="automation" ID="AUTOMATION" ACCESSKEY="A">
	  	 			 <DIV CLASS="itemTextRadioB">
				  			  <LABEL FOR="AUTOMATION" ID="AUTOMATION_LABEL"><U>A</U>utomation</LABEL>
	  	 			 </DIV>
					 </SPAN>
	  
	  				 <BR>
	  
 					 <SPAN ID="CREATABLE_SPAN" TITLE="Allows clients to create this class via it's CLSID or ProgID.">
	  				 <INPUT TYPE="radio" CLASS="Radio" NAME="automation" ID="CREATABLE" ACCESSKEY="e" onpropertychange="OnCreatable();">
	  	 			 <DIV CLASS="itemTextRadioB">
				  			  <LABEL FOR="CREATABLE" ID="CREATABLE_LABEL">Cr<U>e</U>atable by type ID</LABEL>
	  	 			 </DIV>
					 </SPAN>
				</SPAN>
	
				<P CLASS="ElementSpacer2">&nbsp;</P>
					
				<SPAN CLASS="itemText" ID="TYPEID_SPAN" TITLE="Programmatic ID that clients can use to create this component, in place of using the CLSID.">
	  	 			 <LABEL FOR="TYPEID" ID="TYPEID_LABEL"><U>T</U>ype ID:</LABEL>
	  	 			 <BR>
	  	 			 <INPUT CLASS="sideBtn" maxlength="39" ID="TYPEID" TYPE="text" ACCESSKEY="t">
				</SPAN>

				<P CLASS="ElementSpacer16">&nbsp;</P>
				
				<SPAN CLASS="itemText" ID="GEN_DOCTEMPLATE_SECTION" TITLE="Generates a string, icon and menu resource to be associated with a Document Template. Only enabled if project supports Doc/View and base class is CFormView.">
	  				 <INPUT CLASS="CheckBox" TYPE="checkbox" ID="GEN_DOCTEMPLATE" ACCESSKEY="g" onpropertychange="OnGenDocTemplate()">
	  	 			 <DIV CLASS="itemTextCheckboxA">
		  			  <LABEL FOR="GEN_DOCTEMPLATE" ID="GEN_DOCTEMPLATE_LABEL"><U>G</U>enerate DocTemplate resources</LABEL>
	  	 			 </DIV>
				</SPAN>
  		  	  </TD>
  		  	  <TD VALIGN="TOP" WIDTH="12">
  				&nbsp;
  		  	  </TD>
 		  	 </TR>
 			 <TR>
  			  <TD VALIGN="TOP" HEIGHT="100%" COLSPAN="3">
  				&nbsp;
  			  </TD>
 			 </TR>
		 	</TABLE>
			
	   	  <!--CLOSE OF CONTENT//-->
		  </TD>
		 </TR>
		 <TR VALIGN="BOTTOM">
		  <TD HEIGHT="48">
	   	  <!--OPEN OF BUTTON HTML//-->
		  
		  	<TABLE HEIGHT="48" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			<COL WIDTH="12"><COL><COL WIDTH="75"><COL WIDTH="4"><COL WIDTH="75"><COL WIDTH="4"><COL WIDTH="75"><COL WIDTH="12">
			 <TR>
  			  <TD VALIGN="TOP" CLASS="RULE" COLSPAN="8" HEIGHT="2">
				<TABLE BORDER="0" WIDTH="100%" HEIGHT="1" CELLPADDING="0" CELLSPACING="0">
  	 			 <TR VALIGN="TOP">
  	  			  <TD HEIGHT="1" WIDTH="100%" BGCOLOR="BUTTONSHADOW"></TD>
  	  			  <TD HEIGHT="1" WIDTH="1" BGCOLOR="WINDOW"></TD>
  	 			 </TR>
				</TABLE>
  			  </TD>
 			  </TR>
 
 			  <TR>
  			  <TD VALIGN="TOP" HEIGHT="11" COLSPAN="8">
  				&nbsp;
  			  </TD>
 			 </TR>
 
 			<TR>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="12">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="TOP" HEIGHT="23">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="FinishBtn" onClick="OnFinish(document);">Finish</BUTTON>
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="4">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="CancelBtn" onClick="window.external.Finish(document, 'cancel');">Cancel</BUTTON>
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="4">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="HelpBtn" onClick="window.external.OnHelp('vc.codewiz.class.mfc.simple.overview');">Help</BUTTON>
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="12">
  				&nbsp;
  			  </TD>
 			 </TR>
 
 			 <TR>
  			  <TD VALIGN="TOP" HEIGHT="12" COLSPAN="8">
  				&nbsp;
  			  </TD>
 			 </TR>
			</TABLE>
			
	   	  <!--CLOSE OF BUTTON HTML//-->
		  </TD>
		 </TR>
		</TABLE>
	
  	<!--CLOSE OF NAVIGATION, CONTENT, AND BUTTON TABLES//-->
 	</TD>
  </TR>	
</TABLE>

</BODY>
</HTML>

<SCRIPT LANGUAGE="JSCRIPT">

var tab_array = new Array();
tab_array[0] = Default;
tab_array[1] = DocTemp;
var nDlgIndex;

function InitDocument(document)
{
	setDirection();
	
	if (window.external.FindSymbol("DOCUMENT_FIRST_LOAD"))
	{
		var L_WizardDialogTitle_Text = "MFC Class Wizard";
		window.external.AddSymbol("WIZARD_DIALOG_TITLE", L_WizardDialogTitle_Text);
		window.external.SetDefaults(document);
		CreateGuids();
		var strProjName = window.external.FindSymbol("PROJECT_NAME");
		window.external.AddSymbol("SAFE_PROJECT_NAME", CreateSafeName(strProjName));
	}
	PopulateDialogIDs();
	DialogList.Enabled = false;
	nDlgIndex = DialogList.tabIndex;
	DialogList.tabIndex = -1;
	idd_dialog_title.disabled = true;

	for (var nCntr=0; nCntr< aryClassInfo.length; nCntr++)
	{
		var strBaseClass = GetClassName(aryClassInfo[nCntr]);
		if (window.external.FindSymbol("IS_PARENT_DIALOG")=="true")
		{
			if (strBaseClass != "CDialog" && strBaseClass != "CFormView" && strBaseClass != "COlePropertyPage" && strBaseClass != "CPropertyPage" && strBaseClass != "CDHtmlDialog")
				continue;
		}
		var oOption = document.createElement("OPTION");
		oOption.text = strBaseClass;
		oOption.value = strBaseClass;
		BASE_CLASS.add(oOption);
	}	
	window.external.Load(document);

	var oProj = window.external.ProjectObject;
	if (GetProjectFile(oProj, "IDL") || GetProjectFile(oProj, "ODL"))
		window.external.AddSymbol("PROJECT_SUPPORTS_AUTOMATION", true);
	else
		window.external.AddSymbol("PROJECT_SUPPORTS_AUTOMATION", false);

	OnBase();
	OnCreatable();
}

function GetClassName(strClassInfo)
{
	return strClassInfo.substr(0, strClassInfo.indexOf("|"));
}

function GetIncludeFile(strBaseClass)
{
	for (var nCntr=0; nCntr < aryClassInfo.length; nCntr++)
	{
		var strClass = GetClassName(aryClassInfo[nCntr]);
		if (strClass == strBaseClass)
		{
			strClassInfo = aryClassInfo[nCntr];
			var nStart = strClassInfo.indexOf("|") + 1;
			var nEnd = strClassInfo.indexOf("|", nStart);
			return strClassInfo.substring(nStart, nEnd);
		}
	}
	return false;
}

function GetTemplateFile(strBaseClass)
{
	for (var nCntr=0; nCntr < aryClassInfo.length; nCntr++)
	{
		var strClass = GetClassName(aryClassInfo[nCntr]);
		if (strClass == strBaseClass)
		{
			strClassInfo = aryClassInfo[nCntr];
			var nStart = strClassInfo.indexOf("|") + 1;
			nStart = strClassInfo.indexOf("|", nStart) + 1;
			var nEnd = strClassInfo.indexOf("|", nStart);
			return strClassInfo.substring(nStart, nEnd);
		}
	}
	return false;
}

function GetAutoInfo(strClassInfo)
{
	return strClassInfo.charAt(strClassInfo.length-3);
}

function SupportsAA(strClassInfo)
{
	if ("Y" == strClassInfo.charAt(strClassInfo.length-1))
		return true;
	else
		return false;
}

function CreateGuids()
{
	var strGuid = window.external.CreateGuid();

	var strVal = window.external.FormatGuid(strGuid, 0);
	window.external.AddSymbol("DISPIID_REGISTRY_FORMAT", strVal);
	strVal = window.external.FormatGuid(strGuid, 2);
	window.external.AddSymbol("DISPIID_STATIC_CONST_GUID_FORMAT", strVal);

	strGuid = window.external.CreateGuid();

	strVal = window.external.FormatGuid(strGuid, 0);
	window.external.AddSymbol("CLSID_REGISTRY_FORMAT", strVal);
	strVal = window.external.FormatGuid(strGuid, 1);
	window.external.AddSymbol("CLSID_IMPLEMENT_OLECREATE_FORMAT", strVal);
}

function Next(document, linkto)
{
	if (CLASS_NAME.length && !ValidateInput())
		return;
	SetSymbols();
	window.external.Next(document, linkto);
}

function OnFinish(document)
{
	if (!ValidateInput())
		return;

	SetSymbols();
	IDD_DIALOG.value = DialogList.Value;
	OnWizFinish(document);
}


function OnClass()
{
	var strClassName = CLASS_NAME.value;
	if (strClassName.length == 0 ||
		(strClassName.length == 1 && (strClassName.charAt(0) == "C" || strClassName.charAt(0) == "c")))
	{
		if (DialogList.ListIndex == -1)
			DialogList.Value = "";
		HTML_ID.value = "";
		HTML_FILE.value = "";
		HEADER_FILE.value = "";
		IMPL_FILE.value = "";
		TYPEID.value = "";
	}
	else
	{
		var strSafeProjName = window.external.FindSymbol("SAFE_PROJECT_NAME");

		if (strClassName.charAt(0) == "C" || 
			strClassName.charAt(0) == "c")
		{
			if (DialogList.ListIndex == -1)
				DialogList.Value = "IDD_" + strClassName.substr(1).toUpperCase();
			HTML_ID.value = "IDR_HTML_" + strClassName.substr(1).toUpperCase();
			HTML_FILE.value = strClassName.substr(1) + ".htm";
			HEADER_FILE.value = strClassName.substr(1) + ".h";
			IMPL_FILE.value = strClassName.substr(1) + ".cpp";
			var strTypeID = strSafeProjName.substr(0,30) + "." + strClassName.substr(1); 
			TYPEID.value = strTypeID.substr(0,39);
		}
		else
		{
			if (DialogList.ListIndex == -1)
				DialogList.Value = "IDD_" + strClassName.toUpperCase();
			HTML_ID.value = "IDR_HTML_" + strClassName.toUpperCase();
			HTML_FILE.value = strClassName + ".htm";
			HEADER_FILE.value = strClassName + ".h";
			IMPL_FILE.value = strClassName + ".cpp";
			var strTypeID = strSafeProjName.substr(0,30) + "." + strClassName; 
			TYPEID.value = strTypeID.substr(0,39);
		}
	}
}

function OnGenDocTemplate()
{
	if (!GEN_DOCTEMPLATE_SECTION.disabled && GEN_DOCTEMPLATE.checked)	
		DocTemp.className = "activelink";
	else
		DocTemp.className = "inactivelink";
}

var gbDocView = false;
var gbDocViewCheckDone = false;

function IsDocView()
{
	if (gbDocViewCheckDone)
		return gbDocView;

	var oClasses = window.external.ProjectObject.CodeModel.Classes;
	var bDocTemplateFound = false;
	var bMDIFrameFound = false;
	var bSDIFrameFound = false;
	var bDocFound = false;

	for (var nCntr = 1; nCntr <= oClasses.Count; nCntr++)
	{
		if (bDocTemplateFound && bDocFound && (bMDIFrameFound || bSDIFrameFound))
			break;
		var oClass = oClasses(nCntr);
		// look for class derived from CWinApp
		if (!bDocTemplateFound && oClass.IsDerivedFrom("CWinApp"))
		{
			var oInitInstance = oClass.Functions.Find("InitInstance");
			if (oInitInstance)
			{
				if (oInitInstance.BodyText.indexOf("new CMultiDocTemplate") != -1)
				{
					window.external.AddSymbol("MDI_APP", true);
					bDocTemplateFound = true;
				}
				else if (oInitInstance.BodyText.indexOf("new CSingleDocTemplate") != -1)
					bDocTemplateFound = true;
			}
		}
		// look for class derived from CMDIChildWnd
		else if (!bMDIFrameFound && oClass.IsDerivedFrom("CMDIChildWnd"))
		{
			window.external.AddSymbol("FRAME_CLASS", oClass.Name);
			bMDIFrameFound = true;
		}
		// look for class derived from CFrameWnd
		else if (!bMDIFrameFound && !bSDIFrameFound && oClass.IsDerivedFrom("CFrameWnd"))
		{
			window.external.AddSymbol("FRAME_CLASS", oClass.Name);
			bSDIFrameFound = true;
		}
		// look for class derived from CDocument
		else if (oClass.IsDerivedFrom("CDocument"))
		{
			window.external.AddSymbol("DOCUMENT_CLASS", oClass.Name);
			bDocFound = true;
		}
	}

	if (bDocTemplateFound && bDocFound && (bMDIFrameFound || bSDIFrameFound))
		gbDocView = true;

	gbDocViewCheckDone = true;
	return gbDocView;
}

function OnBase()
{
	var strBaseClass = BASE_CLASS.options[BASE_CLASS.selectedIndex].value;
	AUTOMATION_NONE.checked = true;
	
	DisabledControls(BASE_CLASS.selectedIndex);
	if (strBaseClass == "CFormView" && IsDocView())
		GEN_DOCTEMPLATE_SECTION.disabled = false;
	else
		GEN_DOCTEMPLATE_SECTION.disabled = true;
	OnGenDocTemplate();

	if (window.external.FindSymbol("IS_PARENT_DIALOG")=="false")
	{
		if (strBaseClass == "CDialog" || strBaseClass == "CFormView" || strBaseClass == "COlePropertyPage" || strBaseClass == "CPropertyPage" || strBaseClass == "CDHtmlDialog")
		{
			DialogList.Enabled = true;
			DialogList.tabIndex = nDlgIndex;
			idd_dialog_title.disabled = false;
		}
		else
		{
			DialogList.Enabled = false;
			DialogList.tabIndex = -1;
			idd_dialog_title.disabled = true;
		}
	}
	if (SupportsAA(aryClassInfo[BASE_CLASS.selectedIndex]))
		ACCESSIBILITY_SECTION.disabled = false;
	else
		ACCESSIBILITY_SECTION.disabled = true;
}

function DisabledControls(nIndex)
{
	var cAutoSupport = GetAutoInfo(aryClassInfo[nIndex]);
	if (!window.external.FindSymbol("PROJECT_SUPPORTS_AUTOMATION"))
	{
		if (cAutoSupport == "C")
			cAutoSupport = "A";
	}

	switch(cAutoSupport)
	{
		case "C":
			automation_options_title.disabled = false;
			AUTOMATION_NONE_SPAN.disabled = false;
			AUTOMATION_SPAN.disabled = false;
			CREATABLE_SPAN.disabled = false;
			break;

		case "A":
			automation_options_title.disabled = false;
			AUTOMATION_NONE_SPAN.disabled = false;
			AUTOMATION_SPAN.disabled = false;
			CREATABLE_SPAN.disabled = true;
			break;

		default:
			automation_options_title.disabled = true;
			AUTOMATION_NONE_SPAN.disabled = true;
			AUTOMATION_SPAN.disabled = true;
			CREATABLE_SPAN.disabled = true;
			break;
	}

	if (GetClassName(aryClassInfo[nIndex]) == "CDHtmlDialog")
	{
		HTML_ID.disabled = false;
		HTML_ID_LABEL.disabled = false;
		HTML_FILE.disabled = false;
		HTML_FILE_LABEL.disabled = false;
	}
	else
	{
		HTML_ID.disabled = true;
		HTML_ID_LABEL.disabled = true;
		HTML_FILE.disabled = true;
		HTML_FILE_LABEL.disabled = true;
	}
}

function PopulateDialogIDs()
{
	if (window.external.FindSymbol("IS_PARENT_DIALOG")=="true")
	{
		DialogList.AddItem(window.external.FindSymbol("ITEM_NAME"));
		DialogList.ListIndex = 0;
		return;
	}
	var GNS = window.external.ProjectObject.Codemodel;

	var strDialogIds = "";
	try
	{
		strDialogIds = window.external.GetDialogIds();
	}
	catch(e)
	{
		var L_WarningLocation_Text = "Error in default.htm PopulateDialogIDs():\r\n";
		var L_Warning1_Text = "Cannot access resource information.  Check if the .rc file is opened in another editor.";
		window.external.ReportError(L_WarningLocation_Text + L_Warning1_Text);
	}

	var len = strDialogIds.length;
	var iBegin = 0;
	var iEnd = 0;
	while(iEnd>=0)
	{
		var strDialogId;
		iEnd = strDialogIds.indexOf(",", iBegin);
		if(iEnd>=0)
		{
			strDialogId = strDialogIds.substr(iBegin, iEnd-iBegin);
			iBegin=iEnd+1;
		}
		else
		{
			strDialogId = strDialogIds.substr(iBegin);
		}
		var classes = GNS.DialogClasses(strDialogId);
		if(classes.Count>0)
			continue;
		DialogList.AddItem(strDialogId);
	}
}

function SetSymbols()
{
	var strBaseClass = BASE_CLASS.options[BASE_CLASS.selectedIndex].value;
	switch(strBaseClass)
	{
		case "COleServerDoc":
			window.external.AddSymbol("COLESERVERDOC", true);
			break;
		case "CFormView":
			if (window.external.FindSymbol("DOCUMENT_FILE_EXTENSION").length == 0)
			{				
				var strClassName = CLASS_NAME.value;
				if (strClassName.charAt(0) == "C" || strClassName.charAt(0) == "c")
					strClassName = strClassName.substr(1);
				var nMax = window.external.FindSymbol("MAX_DOC_TYPE_NAME");
				if (strClassName.length > nMax)
					window.external.AddSymbol("DOCUMENT_TYPE_NAME", strClassName.substr(0, nMax));
				else
					window.external.AddSymbol("DOCUMENT_TYPE_NAME", strClassName);

				nMax = window.external.FindSymbol("MAX_FILE_NEW_NAME_SHORT");
				if (strClassName.length > nMax)
					window.external.AddSymbol("DOCUMENT_FILE_NEW_NAME_SHORT", strClassName.substr(0, nMax));
				else
					window.external.AddSymbol("DOCUMENT_FILE_NEW_NAME_SHORT", strClassName);

				nMax = window.external.FindSymbol("MAX_FILE_TYPE_ID");
				if (strClassName.length > nMax)
					window.external.AddSymbol("DOCUMENT_FILE_TYPE_ID", strClassName.substr(0, nMax) + ".Document");
				else
					window.external.AddSymbol("DOCUMENT_FILE_TYPE_ID", strClassName + ".Document");

				nMax = window.external.FindSymbol("MAX_FILE_NEW_NAME_LONG");
				if (strClassName.length > nMax)
					window.external.AddSymbol("DOCUMENT_FILE_NEW_NAME_LONG", strClassName.substr(0, nMax) + " Document");
				else
					window.external.AddSymbol("DOCUMENT_FILE_NEW_NAME_LONG", strClassName + " Document");

				if (strClassName.length > 3)
				{
					window.external.AddSymbol("DOCUMENT_FILE_EXTENSION", strClassName.substr(0, 3).toLowerCase());
					window.external.AddSymbol("DOCUMENT_FILTER_NAME", strClassName + " Files (*." + strClassName.substr(0, 3).toLowerCase() + ")");
				}
				else
				{
					window.external.AddSymbol("DOCUMENT_FILE_EXTENSION", strClassName.toLowerCase());
					window.external.AddSymbol("DOCUMENT_FILTER_NAME", strClassName + " Files (*." + strClassName.toLowerCase() + ")");
				}

				window.external.AddSymbol("DOCUMENT_MAIN_FRAME_CAPTION", strClassName);
			}
			break;
		case "COleClientItem":
			window.external.AddSymbol("COLECLIENTITEM", true);
			break;
		case "CColorDialog":
			window.external.AddSymbol("CCOLORDIALOG", true);
			break;
		case "CConnectionPoint":
			window.external.AddSymbol("CCONNECTIONPOINT", true);
			break;
		case "CDocObjectServer":
			window.external.AddSymbol("CDOCOBJECTSERVER", true);
			break;
		case "CDocObjectServerItem":
			window.external.AddSymbol("CDOCOBJECTSERVERITEM", true);
			break;
		case "CFileDialog":
			window.external.AddSymbol("CFILEDIALOG", true);
			break;
		case "CFontDialog":
			window.external.AddSymbol("CFONTDIALOG", true);
			break;
		case "CPageSetupDialog":
			window.external.AddSymbol("CPAGESETUPDIALOG", true);
			break;
		case "CPrintDialog":
			window.external.AddSymbol("CPRINTDIALOG", true);
			break;
		case "CInternetSession":
			window.external.AddSymbol("CINTERNETSESSION", true);
			break;
		case "CPropertyPage":
			window.external.AddSymbol("CPROPERTYPAGE", true);
			break;
		case "CControlBar":
			window.external.AddSymbol("CCONTROLBAR", true);
			break;
		case "CView":
			window.external.AddSymbol("CVIEW", true);
			break;			
		default:
			break;
	}

	if (DialogList.Enabled)
	{
		if (DialogList.ListIndex == -1)
		{
			var strDialogID = DialogList.Value;
			var bDlgExists = false;
			for (var nCntr = 0; nCntr < DialogList.Count; nCntr++)
			{
				if (strDialogID == DialogList.Item(nCntr))
				{
					bDlgExists = true;
					break;
				}				
			}
			if (!bDlgExists)
				window.external.AddSymbol("CREATE_DIALOG", true);
		}
		IDD_DIALOG.value = DialogList.Value;
	}
	var strTemplateHeader = GetTemplateFile(strBaseClass) + ".h";
	var strTemplateImpl = GetTemplateFile(strBaseClass) + ".cpp";
	var strIncludeHeader = "<" + GetIncludeFile(strBaseClass) + ">";
	window.external.AddSymbol("TEMPLATE_HEADER", strTemplateHeader);
	window.external.AddSymbol("TEMPLATE_IMPL", strTemplateImpl);
	window.external.AddSymbol("INCLUDE_HEADER", strIncludeHeader);

	var strClassName = CLASS_NAME.value;
	var strSafeClassName = CreateSafeName(strClassName);
	if (strSafeClassName.substr(0,1) == "C")
		strSafeClassName = strSafeClassName.substr(1, strSafeClassName.length);
	window.external.AddSymbol("CLASS_NAME_ROOT", strSafeClassName);
}

function OnCreatable()
{
	TYPEID.disabled = true;
	TYPEID_LABEL.disabled = true;

	if (CREATABLE.checked && !CREATABLE.disabled)
	{
		TYPEID.disabled = false;
		TYPEID_LABEL.disabled = false;
	}
}

function OnBrowseHeaderFile()
{
	var strFile;
	try
	{
		L_Title1_Text = "VS Wizards Select File";
		L_Title2_Text = "Visual C++ Header Files (*.h)\0*.h\0\0";
		strFile = window.external.GetOpenFileNameViaDlg(L_Title1_Text, window.external.FindSymbol("PROJECT_PATH"),  L_Title2_Text, HEADER_FILE.value);
	}
	catch(e)
	{
		if (e.number != OLE_E_PROMPTSAVECANCELLED)
		{
			var L_ErrMsg1_Text = "Error in OnBrowseHeaderFile()";
			if (e.description.length != 0)
			{
				L_ErrMsg1_Text += ": ";
				L_ErrMsg1_Text += e.description;
			}
			window.external.ReportError(L_ErrMsg1_Text);
		}
		return;
	}
	HEADER_FILE.value = strFile;
}

function OnBrowseImplFile()
{
	var strFile;
	try
	{
		L_Title3_Text = "VS Wizards Select File";
		L_Title4_Text = "Visual C++ Files (*.cpp;*.h;*.inl;*.c)\0*.cpp;*.h;*.inl;*.c\0\0";
		strFile = window.external.GetOpenFileNameViaDlg(L_Title3_Text, window.external.FindSymbol("PROJECT_PATH"), L_Title4_Text, IMPL_FILE.value);
	}
	catch(e)
	{
		if (e.number != OLE_E_PROMPTSAVECANCELLED)
		{
			var L_ErrMsg2_Text = "Error in OnBrowseImplFile()";
			if (e.description.length != 0)
			{
				L_ErrMsg2_Text += ": ";
				L_ErrMsg2_Text += e.description;
			}
			window.external.ReportError(L_ErrMsg2_Text);
		}
		return;
	}
	IMPL_FILE.value = strFile;
}

function ValidateInput()
{
	var oInvalid = null;

	if (!Validate(CLASS_NAME))
		oInvalid = CLASS_NAME;

	if (oInvalid == null)
		if (!Validate(BASE_CLASS))
			oInvalid = BASE_CLASS;

	if (oInvalid == null)
		if (!Validate(DialogList))
			return false;

	if (oInvalid == null)
		if (!Validate(HEADER_FILE))
			oInvalid = HEADER_FILE;

	if (oInvalid == null)
		if (!Validate(IMPL_FILE))
			oInvalid = IMPL_FILE;

	if (oInvalid == null && HTML_ID.disabled == false)
		if (!Validate(HTML_ID))
			oInvalid = HTML_ID;

	if (oInvalid == null && HTML_FILE.disabled == false)
		if (!Validate(HTML_FILE))
			oInvalid = HTML_FILE;

	if (oInvalid == null)
		if (!Validate(TYPEID))
			oInvalid = TYPEID;

	if (oInvalid != null)
	{
		if (gbShowError)
			window.external.ReportError();
		else
			gbShowError = true;
		oInvalid.focus();
		return false;
	}

	return true;
}

var gbShowError = true;

function Validate(obj)
{
	var bValid = true;
	switch(obj.id)
	{
		case "CLASS_NAME":
			bValid = window.external.ParentObject.ValidateMember(obj.value, vsCMElementClass);
			break;
		case "BASE_CLASS":
			if (BASE_CLASS.selectedIndex == -1)
				bValid = false;
			break;
		case "DialogList":
			if (DialogList.Enabled)
				bValid = window.external.ProjectObject.CodeModel.IsValidID(DialogList.Value);
			break;
		case "HEADER_FILE":
			if (!window.external.FindSymbol("HEADER_FILE_VALID"))
			{
				gbShowError = bValid = CanUseFileName(obj.value, true);
				if (!bValid)
					break;
				window.external.AddSymbol("HEADER_FILE_VALID", true)
			}
			bValid = ValidateFileNameAndEnsureInProject(obj.value);
			if (!bValid)
				break;
			if (HEADER_FILE.value == IMPL_FILE.value)
			{
				var L_ErrMsg_Text = "Header and implementation files cannot have the same name.";
				oErrObj = new Error(L_ErrMsg_Text);
				SetErrorInfo(oErrObj);
				bValid = false;
			}
			break;
		case "IMPL_FILE":
			if (!window.external.FindSymbol("IMPL_FILE_VALID"))
			{
				gbShowError = bValid = CanUseFileName(obj.value, false, false, true);
				if (!bValid)
					break;
				window.external.AddSymbol("IMPL_FILE_VALID", true)
			}
			bValid = ValidateFileNameAndEnsureInProject(obj.value, vsCMValidateFileExtCppSource);
			break;
		case "HTML_ID":
			if (!HTML_ID.disabled)
				bValid = window.external.ProjectObject.CodeModel.IsValidID(HTML_ID.value);
			break;
		case "HTML_FILE":
			if (!HTML_FILE.disabled)
			{
				if (!window.external.FindSymbol("HTML_FILE_VALID"))
				{
					gbShowError = bValid = CanUseFileName(obj.value, false, true);
					if (!bValid)
						break;
					window.external.AddSymbol("HTML_FILE_VALID", true)
				}
			}
			bValid = ValidateFileNameAndEnsureInProject(HTML_FILE.value, vsCMValidateFileExtHtml);
			break;
		case "TYPEID":
			if (CREATABLE.checked && !CREATABLE_SPAN.disabled)
				bValid = window.external.IsValidProgID(TYPEID.value);
			break;
		default:
			break;
	}

	if (typeof(bValid) == "undefined")
		bValid = false;

	return bValid;
}

var aryClassInfo = new Array();
//Class Name | Include Header | Template Filename | Flags(C=Createable By TypeID, A=Automation, N=None | Supports Active Accessibility (Y/N))
aryClassInfo[0] = "CAnimateCtrl|afxcmn.h|window|C|Y";
aryClassInfo[1] = "CAsyncMonikerFile|afxole.h|generic|N|N";
aryClassInfo[2] = "CAsyncSocket|afxsock.h|generic|N|N";
aryClassInfo[3] = "CBitmapButton|afxext.h|window|C|Y";
aryClassInfo[4] = "CButton|afxwin.h|window|C|Y";
aryClassInfo[5] = "CCachedDataPathProperty|afxctl.h|generic|N|N";
aryClassInfo[6] = "CCheckListBox|afxwin.h|window|C|Y";
aryClassInfo[7] = "CCmdTarget|afxwin.h|cmdtarg|C|N";
aryClassInfo[8] = "CColorDialog|afxdlgs.h|window|C|Y";
aryClassInfo[9] = "CComboBox|afxwin.h|window|C|N|Y";
aryClassInfo[10] = "CComboBoxEx|afxcmn.h|window|C|Y";
aryClassInfo[11] = "CConnectionPoint|afxdisp.h|generic|N|N";
aryClassInfo[12] = "CControlBar|afxext.h|window|C|Y";
aryClassInfo[13] = "CDatabase|afxdb.h|generic|N|N";
aryClassInfo[14] = "CDataPathProperty|afxctl.h|generic|N|N";
aryClassInfo[15] = "CDateTimeCtrl|afxdtctl.h|window|C|Y";
aryClassInfo[16] = "CDHtmlDialog|afxdhtml.h|dhtmldlg|C|Y";
aryClassInfo[17] = "CDialog|afxwin.h|dialog|C|Y";
aryClassInfo[18] = "CDialogBar|afxext.h|window|C|Y";
aryClassInfo[19] = "CDocItem|afxole.h|cmdtarg|C|N";
aryClassInfo[20] = "CDocObjectServer|afxdocob.h|cmdtarg|A|N";
aryClassInfo[21] = "CDocObjectServerItem|afxdocob.h|cmdtarg|A|N";
aryClassInfo[22] = "CDocument|afxwin.h|doc|C|N";
aryClassInfo[23] = "CDragListBox|afxcmn.h|window|C|Y";
aryClassInfo[24] = "CEdit|afxwin.h|window|C|Y";
aryClassInfo[25] = "CEditView|afxext.h|view|C|Y";
aryClassInfo[26] = "CFileDialog|afxdlgs.h|window|A|Y";
aryClassInfo[27] = "CFindReplaceDialog|afxdlgs.h|window|C|Y";
aryClassInfo[28] = "CFontDialog|afxdlgs.h|window|C|Y";
aryClassInfo[29] = "CFormView|afxext.h|formview|C|Y";
aryClassInfo[30] = "CFrameWnd|afxwin.h|frame|C|Y";
aryClassInfo[31] = "CHeaderCtrl|afxcmn.h|window|C|Y";
aryClassInfo[32] = "CHotKeyCtrl|afxcmn.h|window|C|Y";
aryClassInfo[33] = "CHtmlEditView|afxhtml.h|view|C|Y";
aryClassInfo[34] = "CHtmlEditDoc|afxhtml.h|doc|C|N";
aryClassInfo[35] = "CHtmlView|afxhtml.h|htmlview|C|Y";
aryClassInfo[36] = "CHttpFilter|afxisapi.h|generic|N|N";
aryClassInfo[37] = "CHttpServer|afxisapi.h|generic|N|N";
aryClassInfo[38] = "CInternetSession|afxinet.h|generic|N|N";
aryClassInfo[39] = "CIPAddressCtrl|afxcmn.h|window|C|Y";
aryClassInfo[40] = "CListBox|afxwin.h|window|C|Y";
aryClassInfo[41] = "CListCtrl|afxcmn.h|window|C|Y";
aryClassInfo[42] = "CListView|afxcview.h|view|C|Y";
aryClassInfo[43] = "CMDIChildWnd|afxwin.h|frame|C|Y";
aryClassInfo[44] = "CMDIChildWnd(with splitter)|afxext.h|mdisplit|C|Y";
aryClassInfo[45] = "CMiniFrameWnd|afxwin.h|frame|C|Y";
aryClassInfo[46] = "CMonthCalCtrl|afxdtctl.h|window|C|Y";
aryClassInfo[47] = "CObject|afx.h|generic|N|N";
aryClassInfo[48] = "COleClientItem|afxole.h|cmdtarg|C|N";
aryClassInfo[49] = "COleDataSource|afxole.h|cmdtarg|C|N";
aryClassInfo[50] = "COleDocument|afxole.h|doc|C|N";
aryClassInfo[51] = "COleDropSource|afxole.h|cmdtarg|C|N";
aryClassInfo[52] = "COleDropTarget|afxole.h|cmdtarg|C|N";
aryClassInfo[53] = "COleIPFrameWnd|afxole.h|frame|C|Y";
aryClassInfo[54] = "COleLinkingDoc|afxole.h|doc|C|N";
aryClassInfo[55] = "COleMessageFilter|afxole.h|cmdtarg|C|N";
aryClassInfo[56] = "COlePropertyPage|afxctl.h|oproppg|N|Y";
aryClassInfo[57] = "COleServerDoc|afxole.h|doc|C|N";
aryClassInfo[58] = "COleServerItem|afxole.h|svritem|C|N";
aryClassInfo[59] = "CPageSetupDialog|afxdlgs.h|window|C|Y";
aryClassInfo[60] = "CPrintDialog|afxdlgs.h|window|A|Y";
aryClassInfo[61] = "CProgressCtrl|afxcmn.h|window|C|Y";
aryClassInfo[62] = "CPropertyPage|afxdlgs.h|dialog|C|Y";
aryClassInfo[63] = "CPropertySheet|afxdlgs.h|propsht|C|Y";
aryClassInfo[64] = "CReBar|afxext.h|window|C|Y";
aryClassInfo[65] = "CReBarCtrl|afxcmn.h|window|C|Y";
aryClassInfo[66] = "CRichEditCtrl|afxcmn.h|window|C|Y";
aryClassInfo[67] = "CRichEditView|afxrich.h|view|C|Y";
aryClassInfo[68] = "CScrollBar|afxwin.h|window|C|Y";
aryClassInfo[69] = "CScrollView|afxwin.h|scrview|C|Y";
aryClassInfo[70] = "CSliderCtrl|afxcmn.h|window|C|Y";
aryClassInfo[71] = "CSocket|afxsock.h|generic|N|N";
aryClassInfo[72] = "CSpinButtonCtrl|afxcmn.h|window|C|Y";
aryClassInfo[73] = "CStatic|afxwin.h|window|C|Y";
aryClassInfo[74] = "CStatusBar|afxext.h|window|C|Y";
aryClassInfo[75] = "CStatusBarCtrl|afxcmn.h|window|C|Y";
aryClassInfo[76] = "CTabCtrl|afxcmn.h|window|C|Y";
aryClassInfo[77] = "CToolBar|afxext.h|window|C|Y";
aryClassInfo[78] = "CToolBarCtrl|afxcmn.h|window|C|Y";
aryClassInfo[79] = "CToolTipCtrl|afxcmn.h|window|C|Y";
aryClassInfo[80] = "CTreeCtrl|afxcmn.h|window|C|Y";
aryClassInfo[81] = "CTreeView|afxcview.h|view|C|Y";
aryClassInfo[82] = "CView|afxwin.h|view|C|Y";
aryClassInfo[83] = "CWinApp|afxwin.h|thread|C|N";
aryClassInfo[84] = "CWinThread|afxwin.h|thread|C|N";
aryClassInfo[85] = "CWnd|afxwin.h|window|C|Y";

</SCRIPT>
<SCRIPT ID="INCLUDE_SCRIPT" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT ID="INCLUDE_COMMON" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT>
	var strPath = "../../../../../";
	strPath += window.external.GetHostLocale();
	var strScriptPath = strPath + "/Script.js";
	var strCommonPath = strPath + "/Common.js";
	document.scripts("INCLUDE_SCRIPT").src = strScriptPath;
	document.scripts("INCLUDE_COMMON").src = strCommonPath;
</SCRIPT>

<SCRIPT FOR="DialogList" EVENT="KeyDown(nKeyCode)">
	OnWizComboKeyDown(nKeyCode);
</SCRIPT>
