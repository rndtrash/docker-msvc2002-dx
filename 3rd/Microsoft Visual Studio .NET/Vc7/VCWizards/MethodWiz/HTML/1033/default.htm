<!- (c) 2001 Microsoft Corporation -->
<HTML DIR="LTR">

<HEAD>
	<TITLE>Add Method Wizard</TITLE>
	<META NAME="vs_targetSchema" CONTENT="http://schemas.microsoft.com/intellisense/ie5">
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
	<STYLE TYPE="text/css">@import url();</STYLE>
	<SCRIPT>
		var strURL = "../../../";
		strURL += window.external.GetHostLocale();
		strURL += "/NewStyles.css";
		document.styleSheets(0).imports(0).href = strURL;
	</SCRIPT>

	<SYMBOL NAME="EXTERNAL_NAME" TYPE=text VALUE=""></SYMBOL>
	<SYMBOL NAME="INTERNAL_NAME" TYPE=text VALUE=""></SYMBOL>
	<SYMBOL NAME="STOCK" TYPE=radio VALUE=false></SYMBOL>
	<SYMBOL NAME="CUSTOM" TYPE=radio VALUE=false></SYMBOL>
	<SYMBOL NAME="RETURN_TYPE" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="RETURN_TYPE_VT" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="STOCK_DISPID" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="STOCK_MACRO" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="MFC_CLASS" TYPE=bool VALUE=false></SYMBOL>
	<SYMBOL NAME="MFC_PROJECT" TYPE=bool VALUE=false></SYMBOL>
	<SYMBOL NAME="MFC_CONTROL" TYPE=bool VALUE=false></SYMBOL>
	<SYMBOL NAME="INTERFACE_TYPE" TYPE=text value=""></SYMBOL>

	<SYMBOL NAME="DISPID" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="HELP_STRING" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="CALL_AS" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="HELP_CONTEXT" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="HIDDEN" TYPE=checkbox value=false></SYMBOL>
	<SYMBOL NAME="LOCAL" TYPE=checkbox value=false></SYMBOL>
	<SYMBOL NAME="RESTRICTED" TYPE=checkbox value=false></SYMBOL>
	<SYMBOL NAME="SOURCE" TYPE=checkbox value=false></SYMBOL>
	<SYMBOL NAME="VAR_ARG" TYPE=checkbox value=false></SYMBOL>
	<SYMBOL NAME="LOCAL_ATTRIB" TYPE=bool VALUE=false></SYMBOL>
	<SYMBOL NAME="RETVAL" TYPE=bool VALUE=false></SYMBOL>

	<SYMBOL NAME="VAR_ARG_DISABLED" TYPE=bool VALUE=true></SYMBOL>
	<SYMBOL NAME="DISPID_DISABLED" TYPE=bool VALUE=false></SYMBOL>
	<SYMBOL NAME="NUM_PARAMETERS" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="FUNCTION_PARAMETERS" TYPE=text value=""></SYMBOL>
	<SYMBOL NAME="PARAM_TYPE" TYPE=text value=""></SYMBOL>
</HEAD>

<BODY BGCOLOR="BUTTONFACE" TOPMARGIN="0" LEFTMARGIN="0" RIGHTMARGIN="0" BOTTOMMARGIN="0" ONLOAD="InitDocument(document);" ONKEYDOWN="OnKey();" ONKEYPRESS="OnPress();">

<TABLE CLASS="ONE" HEIGHT="100%" WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
<COL WIDTH="178">
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW ONE//-->
  <TR VALIGN="TOP">
	<TD HEIGHT="79" WIDTH="100%" COLSPAN=2>
	 <TABLE CLASS="TWO" BORDER="0" CELLPADDING="0" CELLSPACING="0">
	 <COL WIDTH="12"><COL><COL WIDTH="12">
	  <TR>
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="12">
	  	&nbsp;
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="12">
	  	&nbsp;
	   </TD>
  
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="12">
	  	&nbsp;
	   </TD>
  
	   <TD CLASS="IMAGE" VALIGN="BOTTOM" WIDTH="110" ROWSPAN="2">
		<DIV CLASS="SMALLA" ID="Layer0">
		 <IMG CLASS="SMALLEST" SRC="..\..\Images\Method.gif" WIDTH="63" HEIGHT="63" ALT="" BORDER="0">
		</DIV>
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="12" WIDTH="6" ROWSPAN="2">
	  	&nbsp;
	   </TD>
	  </TR>
	 
	  <TR>
	   <TD VALIGN="TOP" HEIGHT="65" WIDTH="12">
	  	&nbsp;
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="65">
		<H4 CLASS="HEAD" ID="HEAD">Welcome to the Add Method Wizard</H4>
		<P CLASS="SUBHEAD" ID="SUBHEAD">This wizard adds a method to your interface.</P>
	   </TD>
	  
	   <TD VALIGN="TOP" HEIGHT="65" WIDTH="12">
	  	&nbsp;
	   </TD>
	  </TR>
	 
	  <TR>
	   <TD VALIGN="TOP" CLASS="RULE" COLSPAN="5" HEIGHT="2">
		<TABLE BORDER="0" WIDTH="100%" HEIGHT="1" CELLPADDING="0" CELLSPACING="0">
	  	 <TR VALIGN="TOP">
	  	  <TD HEIGHT="1" WIDTH="100%" BGCOLOR="BUTTONSHADOW"></TD>
	  	  <TD HEIGHT="1" WIDTH="1" BGCOLOR="WINDOW"></TD>
	  	 </TR>
		</TABLE>
	   </TD>
	  </TR>
	 </TABLE>
	</TD>
  </TR>

	<!--CLOSE OF INTRODUCTORY INFORMATION TABLE//-->
 
    <!--OPEN OF NAVIGATION, CONTENT, AND BUTTON TABLES//-->
	<TR VALIGN="TOP">
	<TD CLASS="Three" VALIGN="TOP" HEIGHT="100%" WIDTH="178">
	 <TABLE CLASS="fixedSize" HEIGHT="100%" WIDTH="178" BORDER="0" CELLPADDING="0" CELLSPACING="0">
  	  <TR VALIGN="TOP">
	   <TD CLASS="threeCustom" VALIGN="TOP" STYLE="BACKGROUND-IMAGE: URL(../../Images/ATL_Method_Background.gif);">
	   <!--OPEN OF NAVIGATION TABLE//-->
	    <TABLE CLASS="THREE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		<COL WIDTH="12"><COL WIDTH="166"><COL WIDTH="1">
		 <TR>
	   	  <TD VALIGN="TOP" COLSPAN="3" HEIGHT="12">
	  		&nbsp;
		  </TD>
		 </TR>
		 <TR>
	   	  <TD VALIGN="TOP" HEIGHT="100%" WIDTH="12">
	  		&nbsp;
		  </TD>
	   	  <TD VALIGN="TOP" HEIGHT="100%" WIDTH="165">
	   	  <!--OPEN OF NAVIGATIONAL LINKS//-->

		  	<DIV CLASS="LINKSELECTED">
	 	   	 <SPAN CLASS="VERTLINE1">
			  <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0">
			 </SPAN>
			 <SPAN CLASS="HORILINE1">
			  <TABLE WIDTH="167" HEIGHT="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			   <TR VALIGN="TOP">
			    <TD CLASS="DOTTEDLINE" HEIGHT="1">
				</TD>
			   </TR>
			   <TR VALIGN="TOP">
			    <TD HEIGHT="100%">
				 <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="28" ALT="" BORDER="0">
			    </TD>
			   </TR>
			   <TR VALIGN="TOP">
			    <TD CLASS="DOTTEDLINE" HEIGHT="1">
			    </TD>
			   </TR>
			  </TABLE>
			 </SPAN>
			 <TABLE WIDTH="160" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXTSELECTED">
			  <TR VALIGN="MIDDLE">
			   <TD WIDTH="156">
				<SPAN ID="Default" TITLE="Specify method names and parameters.">Names</SPAN>
			   </TD>
			   <TD WIDTH="4">
				<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
	  		
			<DIV CLASS="LINK">
			 <TABLE WIDTH="166" HEIGHT="28" BORDER="0" CELLPADDING="0" CELLSPACING="0" CLASS="LINKTEXT">
			  <TR VALIGN="MIDDLE">
	  		   <TD WIDTH="162">
				<SPAN CLASS="ACTIVELINK" ID="IDLAttrib" TITLE="Specify any IDL attributes for this method." onClick="if (this.className.toLowerCase() == 'inactivelink') return; Next(document, 'idlattrib.htm');" TABINDEX="1">IDL Attributes</SPAN>
			   </TD>
	  		   <TD WIDTH="4">
			  	<IMG SRC="../../Images/spacer.gif" HEIGHT="1" WIDTH="4">
			   </TD>
			  </TR>
			 </TABLE>
			</DIV>
			
	   	  <!--CLOSE OF NAVIGATIONAL LINKS//-->
		  </TD>
		  <TD WIDTH="1">
		   <DIV CLASS="VERTLINE">
			 <IMG SRC="../../Images/spacer.gif" WIDTH="1" HEIGHT="1" ALT="" BORDER="0">
		   </DIV>
		  </TD>
		 </TR>
		 </TABLE>
		</TD>
	   </TR>
	   </TABLE>
			
	   <!--CLOSE OF NAVIGATION TABLE//-->
	   </TD>


	<TD VALIGN="TOP" HEIGHT="100%">
	   <!--OPEN OF CONTENT AND BUTTON TABLE//-->
	
	   	<TABLE CLASS="ONE" BORDER="0" CELLPADDING="0" CELLSPACING="0">
		<COL WIDTH="100%">
		 <TR VALIGN="TOP">
		  <TD HEIGHT="100%">
	   	  <!--OPEN OF CONTENT//-->
		  
		  	<TABLE CLASS="CONTENT" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			<COL WIDTH="12"><COL><COL WIDTH="12">
 			 <TR>
  			  <TD VALIGN="TOP" HEIGHT="12" COLSPAN="3">
  				&nbsp;
  			  </TD>
 			 </TR>
			 
 			 <TR VALIGN="TOP">
 			 <TD VALIGN="TOP" WIDTH="12">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="TOP">
			   <TABLE WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" STYLE="TABLE-LAYOUT:FIXED; Z-INDEX:2; POSITION:RELATIVE;">
			    <TR VALIGN="TOP">
				 <TD WIDTH="196">
			  	   <SPAN CLASS="itemTextTop" ID="RETURN_TYPE_SPAN" TITLE="Data type returned by method.">
			  	 	<LABEL ID="RETURN_TYPE_LABEL" FOR="RETURN_TYPE_LIST">R<u>e</u>turn type:</LABEL>
				 	<BR>
				 	<INPUT CLASS="SideBtn" STYLE="DISPLAY:NONE;" TYPE="TEXT" ID="DISABLED_RETURN_TYPE" VALUE="HRESULT" DISABLED>
				 	<OBJECT CLASS="itemText" ID="RETURN_TYPE_LIST" ACCESSKEY="E"
				 	CLASSID="CLSID:B4455841-B9A9-441C-B069-A7B98884E2FB"></OBJECT>
				  </SPAN>
				</TD>
			  	<TD VALIGN="TOP" WIDTH="196" STYLE="PADDING-LEFT:12PX;">
			  	  <SPAN CLASS="itemTextTop">
				   <SPAN ID="STOCK_METHODS_SPAN" TITLE="Name of method.">
			  	  	<LABEL FOR="STOCK_METHODS" ID="STOCK_METHODS_LABEL"><U>M</U>ethod name:</LABEL>
				  	<BR>
				  	<OBJECT CLASS="itemText" ID="STOCK_METHODS" ACCESSKEY="M" 
				  	CLASSID="CLSID:B4455841-B9A9-441C-B069-A7B98884E2FB"></OBJECT>
			  	  	<LABEL FOR="METHOD_NAME" STYLE="DISPLAY:NONE;" ID="METHOD_NAME_LABEL"><U>M</U>ethod name:</LABEL>
				  	<INPUT CLASS="sideBtn" ID="METHOD_NAME" STYLE="DISPLAY:NONE;" TYPE="TEXT" VALUE="" ACCESSKEY="M" onPropertyChange="OnMethodName();">
				   </SPAN>
				  </SPAN>
  		  	  	</TD>
 		  	   </TR>
			 
			   <TR VALIGN="TOP" ID="METHOD_TYPE_SECTION2" STYLE="DISPLAY:NONE;">
			  	<TD VALIGN="TOP" COLSPAN="2" HEIGHT="17">
			  		&nbsp;
			  	</TD>
			   </TR>
			 
 			   <TR VALIGN="TOP">
  			  	<TD VALIGN="TOP" ID="METHOD_TYPE_SECTION" STYLE="DISPLAY:NONE;">
 				  <SPAN CLASS="itemText" ID="METHOD_TYPE_SPAN">Select method type:
					 <P CLASS="Spacer">&nbsp;</P>
	
					 <SPAN ID="STOCK_SPAN" TITLE="Insert as predefined stock event.">
	  				 <INPUT TYPE="radio" CLASS="Radio" NAME="implementation" ID="STOCK" ACCESSKEY="S" onPropertyChange="OnMethodType();">
	  	 			 <DIV CLASS="itemTextRadioB">
		  			  <LABEL FOR="STOCK" ID="STOCK_LABEL"><U>S</U>tock</LABEL>
	  	 			 </DIV>
					 </SPAN>
	  
	  				 <BR>
	  
					 <SPAN ID="CUSTOM_SPAN" TITLE="Insert as custom event.">
	  			 	 <INPUT TYPE="radio" CLASS="Radio" NAME="implementation" ID="CUSTOM" ACCESSKEY="U">
	  	 			 <DIV CLASS="itemTextRadioB">
		  			  <LABEL FOR="CUSTOM" ID="CUSTOM_LABEL">C<U>u</U>stom</LABEL>
	  	 			 </DIV>
					 </SPAN>
				  </SPAN>
			   	</TD>
  			  	<TD VALIGN="TOP" ID="INTERNAL_NAME_SECTION" STYLE="DISPLAY:NONE; PADDING-LEFT:12PX;">
			  	 <SPAN CLASS="itemText" ID="INTERNAL_NAME_SPAN" TITLE="Internal name of method.">
			  	 	<LABEL ID="INTERNAL_NAME_LABEL" FOR="INTERNAL_NAME">In<U>t</U>ernal name:</LABEL>
				 	<BR>
					<INPUT CLASS="sideBtn" ID="INTERNAL_NAME" TYPE="TEXT" VALUE="" ACCESSKEY="T">
				 </SPAN>
			  	</TD>
 		  	   </TR>
			 
			   <TR VALIGN="TOP">
			  	<TD VALIGN="TOP" COLSPAN="2" HEIGHT="17">
			  		&nbsp;
			  	</TD>
			   </TR>

 			   <TR VALIGN="TOP" ID="PARAM_ATTRIBUTES_SECTION">
  			  	<TD VALIGN="TOP">
 				  <SPAN CLASS="ItemText" ID="PARAM_ATTRIBUTES_TITLE">Parameter attributes:</SPAN>
  					<SPAN CLASS="ItemText">
					 <P CLASS="Spacer">&nbsp;</P>
	  
	  				 <NOBR>
					 <SPAN ID="IN_SPAN" TITLE="Indicates that a parameter is to be passed from the calling procedure to the called procedure.">
					  <INPUT TYPE="checkbox" CLASS="CheckBoxA" ID="IN" ACCESSKEY="I">
		  			  <LABEL FOR="IN" ID="IN_LABEL" STYLE="POSITION:RELATIVE; TOP:-3PX; LEFT:3PX;"><U>i</U>n</LABEL>
					 </SPAN>
					 </NOBR>
	  
	  				 &nbsp;&nbsp;
	  
	  				 <NOBR>
					 <SPAN ID="OUT_SPAN" TITLE="Attribute identifies pointer parameters that are returned from the called procedure to the calling procedure (from the server to the client).">
					  <INPUT TYPE="checkbox" CLASS="CheckBoxA" ID="OUT" ACCESSKEY="O">
	  	 			  <LABEL FOR="OUT" ID="OUT_LABEL" STYLE="POSITION:RELATIVE; TOP:-3PX; LEFT:3PX;"><U>o</U>ut</LABEL>
					 </SPAN>
					 </NOBR>
	  
	  				 &nbsp;&nbsp;
	  
	  				 <NOBR>
					 <SPAN ID="RETVAL_SPAN" TITLE="Attribute designates the parameter that receives the return value of the member.">
					  <INPUT TYPE="checkbox" CLASS="CheckBoxA" ID="RETVAL" ACCESSKEY="V" onPropertyChange="OnRetVal();">
 	  	 			  <LABEL FOR="RETVAL" ID="RETVAL_LABEL" STYLE="POSITION:RELATIVE; TOP:-3PX; LEFT:3PX;">ret<U>v</U>al</LABEL>
					 </SPAN>
					 </NOBR>
				  </SPAN>
			  	</TD>
 		  	   </TR>
			  </TABLE>
			  
			  <TABLE ID="Adjust" WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0" STYLE="POSITION:RELATIVE; TOP:-1PX; TABLE-LAYOUT:FIXED; Z-INDEX:2;">
			   <TR VALIGN="TOP">
				<TD VALIGN="TOP" STYLE="WIDTH:165PX">
			  	 <SPAN CLASS="itemText" ID="PARAMETER_TYPE_SPAN" TITLE="Type of parameter.">
			  	  <LABEL FOR="PARAMETER_TYPE" ID="PARAMETER_TYPE_LABEL"><U>P</U>arameter type:</LABEL>
				  <BR>
				  <OBJECT TITLE="Type of parameter" CLASS="itemText" ID="PARAMETER_TYPE" ACCESSKEY="P" 
				  CLASSID="CLSID:B4455841-B9A9-441C-B069-A7B98884E2FB" STYLE="WIDTH:159PX;"></OBJECT>
				 </SPAN>
			  	</TD>
				<TD VALIGN="TOP" STYLE="WIDTH:165PX; PADDING-LEFT:12PX">
				 <SPAN ID="PARAMETER_NAME_SPAN" CLASS="itemText" TITLE="Name of the parameter to add.">
	  		 		 <LABEL FOR="PARAMETER_NAME" ID="PARAMETER_NAME_LABEL">Parameter <U>n</U>ame:</LABEL>
	  	 			 <BR>
	  	 			 <INPUT CLASS="sideBtn" STYLE="WIDTH:148PX;POSITION:RELATIVE;" ID="PARAMETER_NAME" ACCESSKEY="N" VALUE="" TYPE="text" TITLE="Name of the parameter to add." onPropertyChange="ToggleButtons();">
				 </SPAN>
				</TD>
				<TD VALIGN="TOP">
				 <BUTTON ID="AddBtn" TITLE="Add parameter" CLASS="buttonClass2" ACCESSKEY="A" onClick="OnAdd();" STYLE="POSITION:RELATIVE;LEFT:-1; TOP:7PX;"><U>A</U>dd</BUTTON>
				</TD>
			   </TR>
					 
			   <TR>
			  	<TD VALIGN="TOP" COLSPAN="2">
 				 <!--<SPAN CLASS="itemText" TITLE="List of method parameters." ID="AUT_ID" >
					<BR>
					<LABEL FOR="PARAMETERS" ID="PARAMETERS_LABEL">Parameter <U>l</U>ist:</LABEL>
					<BR>//-->
					<SELECT CLASS="SideBtn" STYLE="WIDTH:326PX" SIZE="3" ID="PARAMETERS" ACCESSKEY="L" TITLE="List of method parameters." STYLE="MARGIN-TOP: 2PX;">
					</SELECT>
				<!--</SPAN>//-->
  		  	  	</TD>
  		  	  	<TD VALIGN="TOP" WIDTH="12">
				 <BUTTON ID="RemoveBtn" TITLE="Remove parameter" CLASS="buttonClass2" ACCESSKEY="r" onClick="OnRemove();" STYLE="POSITION:RELATIVE;LEFT:-5;"><U>R</U>emove</BUTTON>
  		  	  	</TD>
 		  	   </TR>
			 
			   <TR VALIGN="TOP">
			  	<TD VALIGN="TOP" COLSPAN="2" HEIGHT="100%">
			  		&nbsp;
			  	</TD>
			   </TR>
		 	  </TABLE>
			 </TD>
 		  	</TR>
		 </TABLE>
			
	   	  <!--CLOSE OF CONTENT//-->
		  </TD>
		 </TR>
		 <TR VALIGN="BOTTOM">
		  <TD HEIGHT="48">
	   	  <!--OPEN OF BUTTON HTML//-->
		  
		  	<TABLE HEIGHT="48" BORDER="0" CELLPADDING="0" CELLSPACING="0">
			<COL WIDTH="12"><COL><COL WIDTH="75"><COL WIDTH="4"><COL WIDTH="75"><COL WIDTH="4"><COL WIDTH="75"><COL WIDTH="12">
			 <TR>
  			  <TD VALIGN="TOP" CLASS="RULE" COLSPAN="8" HEIGHT="2">
				<TABLE BORDER="0" WIDTH="100%" HEIGHT="1" CELLPADDING="0" CELLSPACING="0">
  	 			 <TR VALIGN="TOP">
  	  			  <TD HEIGHT="1" WIDTH="100%" BGCOLOR="BUTTONSHADOW"></TD>
  	  			  <TD HEIGHT="1" WIDTH="1" BGCOLOR="WINDOW"></TD>
  	 			 </TR>
				</TABLE>
  			  </TD>
 			  </TR>
 
 			  <TR>
  			  <TD VALIGN="TOP" HEIGHT="11" COLSPAN="8">
  				&nbsp;
  			  </TD>
 			 </TR>
 
 			<TR>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="12">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="TOP" HEIGHT="23">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="FinishBtn" onClick="OnFinish(document);">Finish</BUTTON>
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="4">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="CancelBtn" onClick="window.external.Finish(document, 'cancel');">Cancel</BUTTON>
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="4">
  				&nbsp;
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="75">
  				<BUTTON CLASS="BUTTONS" ID="HelpBtn" onClick="window.external.OnHelp('vc.codewiz.method.overview');">Help</BUTTON>
  			  </TD>
  			  <TD VALIGN="MIDDLE" HEIGHT="23" WIDTH="12">
  				&nbsp;
  			  </TD>
 			 </TR>
 
 			 <TR>
  			  <TD VALIGN="TOP" HEIGHT="12" COLSPAN="8">
  				&nbsp;
  			  </TD>
 			 </TR>
			</TABLE>
			
	   	  <!--CLOSE OF BUTTON HTML//-->
		  </TD>
		 </TR>
		</TABLE>
	
	   <!--CLOSE OF CONTENT AND BUTTON TABLE//-->
	   </TD>
	  </TR>
	 </TABLE>

</BODY>
</HTML>

<SCRIPT LANGUAGE="JSCRIPT">

var tab_array = new Array();
tab_array[0] = Default;
tab_array[1] = IDLAttrib;

var gbRetVal = false;

var oInterface = window.external.ParentObject;
var oProject = window.external.ProjectObject;

function InitDocument(document)
{
	setDirection();
	
	var strInterfaceType = false;
	var bLocalAttrib = false;
	var bMFC = false;
	var bCOleControl = false;
	var bFirstLoad = false;

	if (window.external.FindSymbol("DOCUMENT_FIRST_LOAD"))
	{
		var L_WizardDialogTitle_Text = "Add Method Wizard";
		window.external.AddSymbol("WIZARD_DIALOG_TITLE", L_WizardDialogTitle_Text);
		var coll = document.all.tags("SYMBOL");
		var numSymbols = coll.length;
		for (i = 0; i < numSymbols; i++)
		{
			var obj = coll(i);
			if (typeof(obj.VALUE) == "undefined")
			{
				obj.VALUE = getval(obj);
			}
		}
		window.external.SetDefaults(document);

		strInterfaceType = GetInterfaceType(oInterface);
		window.external.AddSymbol("INTERFACE_TYPE", strInterfaceType);

		var oAttributes = oInterface.Attributes;
		for (var nCntr = 1; nCntr <= oAttributes.Count; nCntr++)
		{
			if (oAttributes(nCntr).Name == "local")
			{
				window.external.AddSymbol("LOCAL_ATTRIB", true);
				bLocalAttrib = true;
				break;
			}
		}

		var aryClasses = new Array();
		var oClass = false;
		if (GetInterfaceClasses(oInterface.Name, oProject, aryClasses) && aryClasses.length)
			oClass = aryClasses[0];

		if (oClass)
		{
			if (oClass.IsDerivedFrom("COleControl") && strInterfaceType == "dispinterface")
			{
				bMFC = true;
				bCOleControl = true;
			}	
			else if (oClass.IsDerivedFrom("CCmdTarget") && strInterfaceType == "dispinterface")
				bMFC = true;
		}
		window.external.AddSymbol("MFC_CLASS", bMFC);
		window.external.AddSymbol("MFC_PROJECT", IsMFCProject(oProject, true));
		window.external.AddSymbol("MFC_CONTROL", bCOleControl);
		bFirstLoad = true;
	}
	window.external.Load(document);

	if (!bFirstLoad)
	{
		strInterfaceType = window.external.FindSymbol("INTERFACE_TYPE");
		bLocalAttrib = window.external.FindSymbol("LOCAL_ATTRIB");
		bMFC = window.external.FindSymbol("MFC_CLASS");
		bCOleControl = window.external.FindSymbol("MFC_CONTROL");
	}

	FillTypesList(strInterfaceType, bLocalAttrib);

	if (bMFC)
		SetUIForMFC(bCOleControl);
	else
		SetUIForNonMFC(strInterfaceType, bLocalAttrib);

	PersistControls(bMFC, strInterfaceType);
	ToggleButtons();
}

function SetUIForNonMFC(strInterfaceType, bLocalAttrib)
{
	STOCK_METHODS.style.display = "none";
	METHOD_NAME.style.display = "inline";
	METHOD_NAME.focus();

	if (strInterfaceType == "dual" || strInterfaceType == "oleautomation" || (strInterfaceType == "custom" && !bLocalAttrib))
	{
		DISABLED_RETURN_TYPE.style.display = "inline";
		RETURN_TYPE_LIST.style.display = "none";
		RETURN_TYPE_LABEL.disabled = true;
	}
	else
	{
		RETURN_TYPE_LIST.ListIndex = 7; // HRESULT
		RETURN_TYPE_LIST.focus();
	}
}

function SetUIForMFC(bCOleControl)
{
	INTERNAL_NAME_SECTION.style.display = "inline";
	METHOD_TYPE_SECTION2.style.display = "inline";
	INTERNAL_NAME_SECTION.style.paddingLeft = "0px";
	PARAM_ATTRIBUTES_SECTION.style.display = "none";
	Adjust.style.marginTop = "-4px";

	if (bCOleControl)
	{
		for (var nCntr = 0; nCntr < strStockMethods.length; nCntr++)
			STOCK_METHODS.AddItem(strStockMethods[nCntr]);
		STOCK_METHODS.InsertItem("", 0);
		CUSTOM_SPAN.disabled = true;
		STOCK_SPAN.disabled = true;

		METHOD_TYPE_SECTION.style.display = "inline";
		METHOD_TYPE_SECTION2.style.display = "inline";
		INTERNAL_NAME_SECTION.style.paddingLeft = "12px";
		Adjust.style.marginTop = "2px";

		var strExternalName = window.external.FindSymbol("EXTERNAL_NAME");
		if (strExternalName.length)
		{
			STOCK_METHODS.Value = strExternalName;
			OnStockMethods();
		}
	}
	else
	{
		STOCK_METHODS.style.display = "none";
		METHOD_NAME.style.display = "inline";
	}
	RETURN_TYPE_LIST.focus();
}

function PersistControls(bMFC, strInterfaceType)
{
	var nNumParams = window.external.FindSymbol("NUM_PARAMETERS");
	nNumParams = nNumParams + 0;
	if (nNumParams)
	{
		for (var nCntr = 0; nCntr < nNumParams; nCntr++)
		{
			var oOption = document.createElement("OPTION");
			var strTypeName = window.external.FindSymbol("PARAM_TYPE_NAME" + nCntr);
			if (bMFC)
				oOption.value = window.external.FindSymbol("PARAM_VT_TYPE" + nCntr);
			var strAttrib = window.external.FindSymbol("PARAM_ATTRIB" + nCntr);
			if (strAttrib.length)
				strTypeName = "[" + strAttrib + "] " + strTypeName;
			oOption.text = strTypeName;
			PARAMETERS.add(oOption);
		}
		PARAMETERS.selectedIndex = PARAMETERS.length - 1;
	}

	if (strInterfaceType == "custom")
		window.external.AddSymbol("DISPID_DISABLED", true);
	else
	{
		var nDispID = window.external.FindSymbol("DISPID");
		if (!nDispID.length)
		{
			nDispID = GetMaxID(oInterface) + 1;
			window.external.AddSymbol("DISPID", nDispID);
		}
	}

	var strReturnType = window.external.FindSymbol("RETURN_TYPE");
	if (strReturnType.length)
		RETURN_TYPE_LIST.Value = strReturnType;

	var strParamType = window.external.FindSymbol("PARAM_TYPE");
	if (strParamType.length)
		PARAMETER_TYPE.Value = strParamType;

}

function FillTypesList(strInterfaceType, bLocalAttrib)
{
	var bMFC = window.external.FindSymbol("MFC_CLASS");

	// fill return types and parameter types listboxes
	for (var nCntr = 0; nCntr < strTypes.length; nCntr++)
	{
		if (strInterfaceType == "dispinterface" || (strInterfaceType == "custom" && bLocalAttrib))
		{
			if (-1 == strTypes[nCntr].indexOf("*") ||
				(strTypes[nCntr].charAt(0) == 'I' &&
				-1 == strTypes[nCntr].indexOf("**")))
			{
				if (!bMFC || (bMFC && strTypes[nCntr] != "HRESULT"))
					RETURN_TYPE_LIST.AddItem(strTypes[nCntr]);
			}
		}

		if (strTypes[nCntr] != "void" &&
			strTypes[nCntr] != "HRESULT")
			PARAMETER_TYPE.AddItem(strTypes[nCntr]);
	}
	PARAMETER_TYPE.InsertItem("", 0);	
}

function Next(document, linkto)
{
	SaveParams();
	if ((STOCK_METHODS.style.display != "none" && STOCK_METHODS.Value.length) ||
		(METHOD_NAME.style.display != "none" && METHOD_NAME.value.length))
	{
		if (!ValidateInput())
			return;
	}
	window.external.Next(document, linkto);
}

function ValidateInput()
{
	var oInvalid = null;

	if (!Validate(RETURN_TYPE_LIST))
		oInvalid = RETURN_TYPE_LIST;

	if (oInvalid == null)
		if (!Validate(STOCK_METHODS))
			oInvalid = STOCK_METHODS;

	if (oInvalid == null)
		if (!Validate(METHOD_NAME))
			oInvalid = METHOD_NAME;

	if (oInvalid == null)
		if (!Validate(INTERNAL_NAME))
			oInvalid = INTERNAL_NAME;

	if (oInvalid != null)
	{
		window.external.ReportError();
		oInvalid.focus();
		return false;
	}
	return true;
}

function Validate(obj)
{
	switch(obj.id)
	{
		case "RETURN_TYPE_LIST":
			if (RETURN_TYPE_LIST.style.display != "none")
			{
				if (RETURN_TYPE_LIST.Value.length == 0)
				{
					var L_ErrMsg1_Text = "You must specify a return type.";
					oErrObj = new Error(L_ErrMsg1_Text);
					SetErrorInfo(oErrObj);
					return false;
				}

				if (window.external.FindSymbol("MFC_CLASS"))
				{
					var strReturnTypeVT = GetVT(RETURN_TYPE_LIST.Value);
					if (!strReturnTypeVT)
					{
						var L_ErrMsg2_Text = "The return type must be a VARIANT-compatible type from the list.";
						oErrObj = new Error(L_ErrMsg2_Text);
						SetErrorInfo(oErrObj);
						return false;
					}
					window.external.AddSymbol("RETURN_TYPE_VT", strReturnTypeVT);
				}
				else
				{
					if (!window.external.dte.VCLanguageManager.ValidateType(RETURN_TYPE_LIST.Value))
						return false;
				}

				window.external.AddSymbol("RETURN_TYPE", RETURN_TYPE_LIST.Value);
			}
			else
				window.external.AddSymbol("RETURN_TYPE", DISABLED_RETURN_TYPE.value);
			break;

		case "STOCK_METHODS":
			if (window.external.FindSymbol("MFC_CONTROL"))
			{
				if (!window.external.ParentObject.ValidateMember(STOCK_METHODS.Value, vsCMElementFunction))
					return false;

				if (!ValidateMethodName(STOCK_METHODS.Value))
					return false;

				window.external.AddSymbol("EXTERNAL_NAME", STOCK_METHODS.Value);
			}
			break;

		case "METHOD_NAME":
			if (!window.external.FindSymbol("MFC_CONTROL"))
			{
				if (!window.external.ParentObject.ValidateMember(METHOD_NAME.value, vsCMElementFunction))
					return false;

				if (!ValidateMethodName(METHOD_NAME.value))
					return false;

				window.external.AddSymbol("EXTERNAL_NAME", METHOD_NAME.value);
			}
			break;

		case "INTERNAL_NAME":
			if (window.external.FindSymbol("MFC_CLASS") && (STOCK_SPAN.disabled || (!STOCK_SPAN.disabled && !STOCK.checked)))
			{
				if (!ValidateMethodName(INTERNAL_NAME.value))
					return false;
			}
			if (window.external.FindSymbol("MFC_CONTROL") && !STOCK_SPAN.disabled && STOCK.checked)
			{
				window.external.AddSymbol("STOCK_DISPID", strStockDispIDs[GetListIndex(STOCK_METHODS)-1]);
				window.external.AddSymbol("STOCK_MACRO", strStockMacros[GetListIndex(STOCK_METHODS)-1]);
			}
			break;

		default:
			break;
	}
	return true;
}

function ValidateMethodName(strMethodName)
{
	try
	{
		var strParams = "(" + window.external.FindSymbol("FUNCTION_PARAMETERS") + ")";

		var aryClasses = new Array();
		if (GetInterfaceClasses(oInterface.Name, oProject, aryClasses) && aryClasses.length)
		{
			for (var nCntr = 0; nCntr < aryClasses.length; nCntr++)
			{
				var oClass = aryClasses[nCntr];
				if(!oClass.ValidateMember(strMethodName + strParams, vsCMElementFunction))
					return false;
			}
		}
		return true;
	}
	catch(e)
	{
		var L_ErrMsg13_Text = "Error in ValidateMethodName()";
		if (e.description.length != 0)
		{
			L_ErrMsg13_Text += ": ";
			L_ErrMsg13_Text += e.description;
		}
		window.external.ReportError(L_ErrMsg13_Text);
		return false;
	}
}

function OnFinish(document)
{
	SaveParams();
	if (!ValidateInput())
		return;
	OnWizFinish(document);
}

function SaveParams()
{
	var strFuncParams = "";
	for (var nCntr = 0; nCntr < PARAMETERS.length; nCntr++)
	{
		var strTemp = PARAMETERS.options[nCntr].text;
		var nIndex = 0;
		if (strTemp.charAt(0) == '[')
		{
			nIndex = strTemp.indexOf(']');
			window.external.AddSymbol("PARAM_ATTRIB" + nCntr, strTemp.substr(1, nIndex-1));
			nIndex += 2;
		}
		else
			window.external.AddSymbol("PARAM_ATTRIB" + nCntr, "");

		var strTypeName = strTemp.substr(nIndex);
		if (strFuncParams.length)
			strFuncParams += ", ";

		window.external.AddSymbol("PARAM_TYPE_NAME" + nCntr, strTypeName);

		var bMFC = window.external.FindSymbol("MFC_CLASS");
		if (bMFC)
		{
			var strVtType = PARAMETERS.options[nCntr].value;
			window.external.AddSymbol("PARAM_VT_TYPE" + nCntr, strVtType);

			if (strTypeName.substr(0, 5) == "BSTR " &&
				strTypeName.substr(0, 6) != "BSTR *")
			{
				strFuncParams += "LPCTSTR " + strTypeName.substr(5);
			}
			else
				strFuncParams += strTypeName;
		}
		else
			strFuncParams += strTypeName;
	}
	window.external.AddSymbol("NUM_PARAMETERS", PARAMETERS.length);
	if (PARAMETER_TYPE.Value.length)
		window.external.AddSymbol("PARAM_TYPE", PARAMETER_TYPE.Value);
}

function getval(obj)
{
	var SymbolValue = "";
	switch(obj.NAME)
	{
		default:
			SymbolValue = "";
			break;
	}
	return (SymbolValue);
}

function ValidateParam(strType, strName)
{
	if (strType.length == 0)
	{
		var L_ErrMsg8_Text = "You must specify a parameter type.";
		window.external.ReportError(L_ErrMsg8_Text);
		PARAMETER_TYPE.focus();
		return false;
	}

	if (window.external.FindSymbol("MFC_CLASS"))
	{			
		var strVTS = GetVTS(PARAMETER_TYPE.Value);
		if (!strVTS)
		{
			var L_ErrMsg12_Text = "Parameter type must be a VARIANT-compatible type from the list.";
			window.external.ReportError(L_ErrMsg12_Text);
			PARAMETER_TYPE.focus();
			return false;
		}
	}
	else
	{
		try
		{
			window.external.CppParseTypeString(strType);
		}
		catch(e)
		{
			var L_ErrMsg15_Text = "Invalid parameter type";
			PARAMETER_TYPE.focus();
			window.external.ReportError(L_ErrMsg15_Text);
			return false;		
		}
	}

	if (strName.length == 0)
	{
		var L_ErrMsg9_Text = "You must specify a parameter name.";
		window.external.ReportError(L_ErrMsg9_Text);
		PARAMETER_NAME.focus();
		return false;
	}

	var strParamNames = ExtractParamNames() + "," + strName;
	if (STOCK_METHODS.style.display != "none")
		strMethodName = STOCK_METHODS.Value;
	else
		strMethodName = METHOD_NAME.value;
	if(!window.external.dte.VCLanguageManager.ValidateParameterNames(strMethodName, strParamNames, vsCMElementFunction))
	{
		window.external.ReportError();
		PARAMETER_NAME.focus();
		return false;
	}

	if (!window.external.ProjectObject.CodeModel.IsValidID(strName))
	{
		var L_ErrMsg14_Text = "Invalid parameter name.";
		window.external.ReportError(L_ErrMsg14_Text);
		PARAMETER_NAME.focus();
		return false;
	}

	return true;
}

function OnAdd()
{	
	var strType = PARAMETER_TYPE.Value;
	var strName = PARAMETER_NAME.value;

	if (!ValidateParam(strType, strName))
		return;

	var strParam, NamePos, NameLength, NameLengthPos;
	try
	{
		if(strType.substr(0, 1) == '[')
		{
			var L_ErrMsg10_Text = "Invalid parameter type: No attributes allowed in type description.";
			window.external.ReportError(L_ErrMsg10_Text);
			return;
		}
		NameLengthPos = new VBArray(window.external.CppParseTypeString(strType));
	}
	catch(e)
	{
		var L_ErrMsg11_Text = "Invalid parameter type";
		window.external.ReportError(L_ErrMsg11_Text);
		return;		
	}
	NamePos = NameLengthPos.getItem(0);
	NameLength = NameLengthPos.getItem(1);
	if(NamePos==strType.length)
	{
		strParam = strType + " " + strName;
	}
	else
	{
		strParam = strType.substr(0, NamePos) + " " + strName;
		strParam += strType.substr(NamePos+NameLength); //always replace eventual name with PARAMETER_NAME.value
	}

	if (PARAM_ATTRIBUTES_SECTION.style.display != "none")
	{
		if (IN.checked || OUT.checked || RETVAL.checked)
		{
			var strAttrib = "[";
			if (IN.checked)
				strAttrib += "in";
			if (OUT.checked)
			{
				if (strAttrib.length > 1)
					strAttrib += ",out";
				else
					strAttrib += "out";
			}
			if (RETVAL.checked)
			{
				if (strAttrib.length > 1)
					strAttrib += ",retval";
				else
					strAttrib += "retval";
				RETVAL_SPAN.disabled = true;
				PARAMETER_NAME.disabled = true;
				PARAMETER_TYPE.Enabled = false;
				PARAMETER_NAME_LABEL.disabled = true;
				PARAMETER_TYPE_LABEL.disabled = true;
				gbRetVal = true;
			}
			strAttrib += "]";
			strParam = strAttrib + " " + strParam;
		}
	}

	var oOption = document.createElement("OPTION");
	if (window.external.FindSymbol("MFC_CLASS"))
		oOption.value = GetVTS(PARAMETER_TYPE.Value);

	oOption.text = strParam;
	PARAMETERS.add(oOption);
	PARAMETERS.selectedIndex = PARAMETERS.length - 1;

	PARAMETER_NAME.value = "";
	PARAMETER_TYPE.ListIndex = 0;
	IN.checked = false;
	OUT.checked = false;
	RETVAL.checked = false;

	if (strType.toLowerCase() == "safearray(variant)")
		window.external.AddSymbol("VAR_ARG_DISABLED", false);

	ToggleButtons();
}

function GetVTS(strType)
{
	for (var nCntr = 0; nCntr < strTypes.length; nCntr++)
	{
		if (strTypes[nCntr] == strType)
			return vtTypes[nCntr];
	}
	return false;
}


function ExtractParamNames()
{
	var strParamNames = "";

	var Params = document.all.tags("SELECT").item("PARAMETERS");
	for(var index=0; index < Params.options.length; index++)
	{
		var strParam = Params.options[index].text;
		var NamePos, NameLength;			
		var NameLengthPos = new VBArray(window.external.CppParseTypeString(strParam));
		NamePos = NameLengthPos.getItem(0);
		NameLength = NameLengthPos.getItem(1);
		if(index!=0)
			strParamNames += ","
		strParamNames += strParam.substr(NamePos, NameLength);
	}
	return strParamNames;
}

function OnRemove()
{
	if (PARAMETERS.selectedIndex == -1)
		return;

	var nIndex = PARAMETERS.selectedIndex;

	while (PARAMETERS.selectedIndex != -1)
	{
		var strParam = PARAMETERS.options[PARAMETERS.selectedIndex].text;
		if (strParam.toLowerCase().indexOf("safearray(variant)") != -1)
		{
			window.external.AddSymbol("VAR_ARG_DISABLED", true);
			window.external.AddSymbol("VAR_ARG", false);
		}

		if (strParam.indexOf(",retval]") != -1)
		{
			RETVAL_SPAN.disabled = false;
			PARAMETER_NAME.disabled = false;
			PARAMETER_TYPE.Enabled = true;
			PARAMETER_NAME_LABEL.disabled = false;
			PARAMETER_TYPE_LABEL.disabled = false;
			gbRetVal = false;
		}
		PARAMETERS.remove(PARAMETERS.selectedIndex);
	}
	
	if (PARAMETERS.length == 0)
	{
		window.external.AddSymbol("VAR_ARG_DISABLED", true);
		window.external.AddSymbol("VAR_ARG", false);
		RETVAL_SPAN.disabled = false;
	}
	else
		PARAMETERS.selectedIndex = (nIndex < PARAMETERS.length) ? nIndex : PARAMETERS.length-1;

	ToggleButtons();
}

function GetVT(strType)
{
	for (var nCntr = 0; nCntr < strTypes.length; nCntr++)
	{
		if (strTypes[nCntr] == strType)
		{
			var strVT = vtTypes[nCntr];
			if (strVT == "VTS_SCODE")
				return "VT_ERROR";
			else if (strVT == "VTS_PSCODE")
				return "VT_PERROR";
			else
			{
				strVT = strVT.substr(0,2) + strVT.substr(3);
				return strVT;
			}
		}
	}
	return false;
}

function OnMethodType()
{
	if (!window.external.FindSymbol("MFC_CLASS"))
		return;
	if (STOCK.checked)
		EnableDisableControls(true);
	else
		EnableDisableControls(false);
}

function EnableDisableControls(bStock)
{
	if (bStock)
	{
		window.external.AddSymbol("DISPID_DISABLED", true);
		INTERNAL_NAME.disabled = true;
		PARAMETER_NAME.disabled = true;
		PARAMETER_TYPE.Enabled = false;
		INTERNAL_NAME_LABEL.disabled = true;
		PARAMETER_NAME_LABEL.disabled = true;
		PARAMETER_TYPE_LABEL.disabled = true;

		PARAMETERS.length = 0;
		INTERNAL_NAME.value = "";
		RETURN_TYPE_LIST.ListIndex = RETURN_TYPE_LIST.Count - 1;
		RETURN_TYPE_LIST.Enabled = false;
		RETURN_TYPE_LABEL.disabled = true;
	}
	else
	{
		window.external.AddSymbol("DISPID_DISABLED", false);
		INTERNAL_NAME.disabled = false;
		PARAMETER_NAME.disabled = false;
		PARAMETER_TYPE.Enabled = true;
		INTERNAL_NAME_LABEL.disabled = false;
		PARAMETER_NAME_LABEL.disabled = false;
		PARAMETER_TYPE_LABEL.disabled = false;

		INTERNAL_NAME.value = STOCK_METHODS.Value;
		var strInterfaceType = window.external.FindSymbol("INTERFACE_TYPE");
		var bLocalAttrib = window.external.FindSymbol("LOCAL_ATTRIB");
		if (strInterfaceType == "dispinterface" || (strInterfaceType == "custom" && bLocalAttrib))
		{
			RETURN_TYPE_LIST.Enabled = true;
			RETURN_TYPE_LABEL.disabled = false;
		}
	}
	ToggleButtons();
}

function OnMethodName()
{
	if (METHOD_NAME.value.length)
	{
		var L_Method1_Text = "method ";
		window.external.AddSymbol("HELP_STRING", L_Method1_Text + METHOD_NAME.value);
	}
	else
		window.external.AddSymbol("HELP_STRING", "");

	INTERNAL_NAME.value = METHOD_NAME.value;
}

function OnRetVal()
{
	if (RETVAL.checked)
	{
		IN.checked = false;
		IN_SPAN.disabled = true;
		OUT.checked = true;
		OUT_SPAN.disabled = true;
	}
	else
	{
		IN_SPAN.disabled = false;

		var strParamType = PARAMETER_TYPE.Value;
		if (strParamType.length &&
			strParamType.indexOf("*") != -1 &&
			strParamType != "IDispatch*" &&
			strParamType != "IFontDisp*" &&
			strParamType != "IPictureDisp*" &&
			strParamType != "IUnknown*")
		{
			OUT_SPAN.disabled = false;
		}
	}
}

function ToggleButtons()
{
	if (PARAMETER_TYPE.Value.length && PARAMETER_NAME.value.length && !gbRetVal
		&& (STOCK_SPAN.disabled || (!STOCK_SPAN.disabled && !STOCK.checked)))
		AddBtn.disabled = false;
	else
		AddBtn.disabled = true;
	if (PARAMETERS.length && PARAMETERS.selectedIndex != -1)
		RemoveBtn.disabled = false;
	else
		RemoveBtn.disabled = true;

	var strParamType = PARAMETER_TYPE.Value;
	if (strParamType.length &&
		strParamType.indexOf("*") != -1 &&
		strParamType != "IDispatch*" &&
		strParamType != "IFontDisp*" &&
		strParamType != "IPictureDisp*" &&
		strParamType != "IUnknown*")
	{
		RETVAL_SPAN.disabled = false;
		if (!RETVAL.checked)
			OUT_SPAN.disabled = false;
	}
	else
	{
		OUT.checked = false;
		OUT_SPAN.disabled = true;
		RETVAL.checked = false;
		RETVAL_SPAN.disabled = true;
	}
}

function OnStockMethods()
{
	if (GetListIndex(STOCK_METHODS) > 0)
	{
		CUSTOM_SPAN.disabled = false;
		STOCK_SPAN.disabled = false;
		STOCK.checked = true;
		EnableDisableControls(true);
	}
	else
	{
		CUSTOM_SPAN.disabled = true;
		STOCK_SPAN.disabled = true;
		EnableDisableControls(false);
	}

	if (STOCK_METHODS.Value.length)
	{
		var L_Method2_Text = "method ";
		window.external.AddSymbol("HELP_STRING", L_Method2_Text + STOCK_METHODS.Value);
	}
	else
		window.external.AddSymbol("HELP_STRING", "");
}

function GetListIndex(oList)
{
	for (var nCntr = 0; nCntr < oList.Count; nCntr++)
	{
		if (oList.Item(nCntr) == oList.Value)
			return nCntr;
	}
	return -1;
}

var vtTypes = new Array;
var strTypes = new Array;

 vtTypes[0]		= "VTS_BSTR";
strTypes[0]		= "BSTR";
 vtTypes[1]		= "VTS_PBSTR";
strTypes[1]		= "BSTR*";
 vtTypes[2]		= "VTS_UI1";
strTypes[2]		= "BYTE";
 vtTypes[3]		= "VTS_PUI1";
strTypes[3]		= "BYTE*";
 vtTypes[4]		= "VTS_I1";
strTypes[4]		= "CHAR";
 vtTypes[5]		= "VTS_PI1";
strTypes[5]		= "CHAR*";
 vtTypes[6]		= "VTS_CY";
strTypes[6]		= "CY";
 vtTypes[7]		= "VTS_PCY";
strTypes[7]		= "CY*";
 vtTypes[8]		= "VTS_DATE";
strTypes[8]		= "DATE";
 vtTypes[9]		= "VTS_PDATE";
strTypes[9]		= "DATE*";
 vtTypes[10]	= "VTS_R8";
strTypes[10]	= "DOUBLE";
 vtTypes[11]	= "VTS_PR8";
strTypes[11]	= "DOUBLE*";
 vtTypes[12]	= "VTS_R4";
strTypes[12]	= "FLOAT";
 vtTypes[13]	= "VTS_PR4";
strTypes[13]	= "FLOAT*";
 vtTypes[14]	= "VTS_HRESULT";
strTypes[14]	= "HRESULT";
 vtTypes[15]	= "VTS_DISPATCH";
strTypes[15]	= "IDispatch*";
 vtTypes[16]	= "VTS_PDISPATCH";
strTypes[16]	= "IDispatch**";
 vtTypes[17]	= "VTS_FONT";
strTypes[17]	= "IFontDisp*";
 vtTypes[18]	= "VTS_PICTURE";
strTypes[18]	= "IPictureDisp*";
 vtTypes[19]	= "VTS_UNKNOWN";
strTypes[19]	= "IUnknown*";
 vtTypes[20]	= "VTS_PUNKNOWN";
strTypes[20]	= "IUnknown**";
 vtTypes[21]	= "VTS_I4";
strTypes[21]	= "LONG";
 vtTypes[22]	= "VTS_PI4";
strTypes[22]	= "LONG*";
 vtTypes[23]	= "VTS_I8";    
strTypes[23]	= "LONGLONG";
 vtTypes[24]	= "VTS_PI8";   
strTypes[24]	= "LONGLONG*";
 vtTypes[25]	= "VTS_COLOR";
strTypes[25]	= "OLE_COLOR";
 vtTypes[26]	= "VTS_PCOLOR";
strTypes[26]	= "OLE_COLOR*";
 vtTypes[27]	= "VTS_XPOS_HIMETRIC";
strTypes[27]	= "OLE_XPOS_HIMETRIC";
 vtTypes[28]	= "VTS_PXPOS_HIMETRIC";
strTypes[28]	= "OLE_XPOS_HIMETRIC*";
 vtTypes[29]	= "VTS_YPOS_HIMETRIC";
strTypes[29]	= "OLE_YPOS_HIMETRIC";
 vtTypes[30]	= "VTS_PYPOS_HIMETRIC";
strTypes[30]	= "OLE_YPOS_HIMETRIC*";
 vtTypes[31]	= "VTS_XSIZE_HIMETRIC";
strTypes[31]	= "OLE_XSIZE_HIMETRIC";
 vtTypes[32]	= "VTS_PXSIZE_HIMETRIC";
strTypes[32]	= "OLE_XSIZE_HIMETRIC*";
 vtTypes[33]	= "VTS_YSIZE_HIMETRIC";
strTypes[33]	= "OLE_YSIZE_HIMETRIC";
 vtTypes[34]	= "VTS_PYSIZE_HIMETRIC";
strTypes[34]	= "OLE_YSIZE_HIMETRIC*";
 vtTypes[35]	= "VTS_XPOS_PIXELS";
strTypes[35]	= "OLE_XPOS_PIXELS";
 vtTypes[36]	= "VTS_PXPOS_PIXELS";
strTypes[36]	= "OLE_XPOS_PIXELS*";
 vtTypes[37]	= "VTS_YPOS_PIXELS";
strTypes[37]	= "OLE_YPOS_PIXELS";
 vtTypes[38]	= "VTS_PYPOS_PIXELS";
strTypes[38]	= "OLE_YPOS_PIXELS*";
 vtTypes[39]	= "VTS_XSIZE_PIXELS";
strTypes[39]	= "OLE_XSIZE_PIXELS";
 vtTypes[40]	= "VTS_PXSIZE_PIXELS";
strTypes[40]	= "OLE_XSIZE_PIXELS*";
 vtTypes[41]	= "VTS_YSIZE_PIXELS";
strTypes[41]	= "OLE_YSIZE_PIXELS";
 vtTypes[42]	= "VTS_PYSIZE_PIXELS";
strTypes[42]	= "OLE_YSIZE_PIXELS*";
 vtTypes[43]	= "VTS_HANDLE";
strTypes[43]	= "OLE_HANDLE";
 vtTypes[44]	= "VTS_PHANDLE";
strTypes[44]	= "OLE_HANDLE*";
 vtTypes[45]	= "VTS_OPTEXCLUSIVE";
strTypes[45]	= "OLE_OPTEXCLUSIVE";
 vtTypes[46]	= "VTS_POPTEXCLUSIVE";
strTypes[46]	= "OLE_OPTEXCLUSIVE*";
 vtTypes[47]	= "VTS_TRISTATE";
strTypes[47]	= "OLE_TRISTATE";
 vtTypes[48]	= "VTS_PTRISTATE";
strTypes[48]	= "OLE_TRISTATE*";
 vtTypes[49]	= "VTS_SCODE";
strTypes[49]	= "SCODE";
 vtTypes[50]	= "VTS_PSCODE";
strTypes[50]	= "SCODE*";
 vtTypes[51]	= "VTS_I2";
strTypes[51]	= "SHORT";
 vtTypes[52]	= "VTS_PI2";
strTypes[52]	= "SHORT*";
 vtTypes[53]	= "VTS_UI4";   
strTypes[53]	= "ULONG";
 vtTypes[54]	= "VTS_PUI4";  
strTypes[54]	= "ULONG*";
 vtTypes[55]	= "VTS_UI8"; 
strTypes[55]	= "ULONGLONG";
 vtTypes[56]	= "VTS_PUI8";
strTypes[56]	= "ULONGLONG*";
 vtTypes[57]	= "VTS_UI2";
strTypes[57]	= "USHORT";
 vtTypes[58]	= "VTS_PUI2";
strTypes[58]	= "USHORT*";
 vtTypes[59]	= "VTS_VARIANT";
strTypes[59]	= "VARIANT";
 vtTypes[60]	= "VTS_PVARIANT";
strTypes[60]	= "VARIANT*";
 vtTypes[61]	= "VTS_BOOL";
strTypes[61]	= "VARIANT_BOOL";
 vtTypes[62]	= "VTS_PBOOL";
strTypes[62]	= "VARIANT_BOOL*";
 vtTypes[63]	= "VTS_EMPTY";
strTypes[63]	= "void";

var strStockMethods = new Array;
strStockMethods[0] = "DoClick";
strStockMethods[1] = "Refresh";

var strStockDispIDs = new Array;
strStockDispIDs[0] = "DISPID_DOCLICK";
strStockDispIDs[1] = "DISPID_REFRESH";

var strStockMacros = new Array;
strStockMacros[0] = "DISP_STOCKFUNC_DOCLICK";
strStockMacros[1] = "DISP_STOCKFUNC_REFRESH";

</SCRIPT>
<SCRIPT ID="INCLUDE_SCRIPT" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT ID="INCLUDE_COMMON" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT>
	var strPath = "../../../";
	strPath += window.external.GetHostLocale();
	var strScriptPath = strPath + "/Script.js";
	var strCommonPath = strPath + "/Common.js";
	document.scripts("INCLUDE_SCRIPT").src = strScriptPath;
	document.scripts("INCLUDE_COMMON").src = strCommonPath;
</SCRIPT>

<SCRIPT FOR="STOCK_METHODS" EVENT="Change">
	OnStockMethods();
</SCRIPT>

<SCRIPT FOR="PARAMETER_TYPE" EVENT="Change">
	ToggleButtons();
</SCRIPT>

<SCRIPT FOR="RETURN_TYPE_LIST" EVENT="KeyDown(nKeyCode)">
	OnWizComboKeyDown(nKeyCode);
</SCRIPT>

<SCRIPT FOR="STOCK_METHODS" EVENT="KeyDown(nKeyCode)">
	OnWizComboKeyDown(nKeyCode);
</SCRIPT>

<SCRIPT FOR="PARAMETER_TYPE" EVENT="KeyDown(nKeyCode)">
	OnWizComboKeyDown(nKeyCode);
</SCRIPT>
